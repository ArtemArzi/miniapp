const sqlite3 = require('sqlite3').verbose();
const bcrypt = require('bcryptjs');
const path = require('path');

class Database {
  constructor() {
    this.db = null;
    this.dbPath = process.env.DB_PATH || './database/jaguar_club.db';
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async init() {
    return new Promise((resolve, reject) => {
      this.db = new sqlite3.Database(this.dbPath, (err) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err);
          reject(err);
        } else {
          console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –ë–î —É—Å–ø–µ—à–Ω–æ');
          this.createTables().then(resolve).catch(reject);
        }
      });
    });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
  async createTables() {
    const tables = [
      // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      `CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE NOT NULL,
        password_hash TEXT NOT NULL,
        name TEXT NOT NULL,
        role TEXT CHECK(role IN ('client', 'coach', 'admin')) DEFAULT 'client',
        phone TEXT,
        avatar_url TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        is_active BOOLEAN DEFAULT 1
      )`,

      // –¢–∞–±–ª–∏—Ü–∞ –∞–Ω–∫–µ—Ç "–¢–æ—á–∫–∞ –ê"
      `CREATE TABLE IF NOT EXISTS point_a_forms (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        weight REAL,
        body_fat_percentage REAL,
        plank_time INTEGER,
        punches_per_minute INTEGER,
        energy_level INTEGER CHECK(energy_level >= 1 AND energy_level <= 10),
        stress_level INTEGER CHECK(stress_level >= 1 AND stress_level <= 10),
        sleep_quality INTEGER CHECK(sleep_quality >= 1 AND sleep_quality <= 10),
        nutrition_quality INTEGER CHECK(nutrition_quality >= 1 AND nutrition_quality <= 10),
        emotions_level INTEGER CHECK(emotions_level >= 1 AND emotions_level <= 10),
        intimacy_level INTEGER CHECK(intimacy_level >= 1 AND intimacy_level <= 10),
        goal_description TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
      )`,

      // –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      `CREATE TABLE IF NOT EXISTS trainings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        coach_id INTEGER NOT NULL,
        training_date DATE NOT NULL,
        training_type TEXT CHECK(training_type IN ('–¢–µ—Ö–Ω–∏–∫–∞', '–ö–∞—Ä–¥–∏–æ', '–°–ø–∞—Ä—Ä–∏–Ω–≥', '–û–±—â–∞—è')) DEFAULT '–û–±—â–∞—è',
        attended BOOLEAN DEFAULT 1,
        comment TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE,
        FOREIGN KEY(coach_id) REFERENCES users(id) ON DELETE CASCADE
      )`,

      // –¢–∞–±–ª–∏—Ü–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ç—Ä–µ–Ω–µ—Ä–æ–≤
      `CREATE TABLE IF NOT EXISTS trainer_comments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        training_id INTEGER,
        user_id INTEGER NOT NULL,
        coach_id INTEGER NOT NULL,
        comment_text TEXT NOT NULL,
        training_type TEXT DEFAULT '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
        is_read BOOLEAN DEFAULT 0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(training_id) REFERENCES trainings(id) ON DELETE SET NULL,
        FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE,
        FOREIGN KEY(coach_id) REFERENCES users(id) ON DELETE CASCADE
      )`,

      // –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
      `CREATE TABLE IF NOT EXISTS progress_updates (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        weight REAL,
        body_fat_percentage REAL,
        plank_time INTEGER,
        punches_per_minute INTEGER,
        energy_level INTEGER CHECK(energy_level >= 1 AND energy_level <= 10),
        stress_level INTEGER CHECK(stress_level >= 1 AND stress_level <= 10),
        sleep_quality INTEGER CHECK(sleep_quality >= 1 AND sleep_quality <= 10),
        nutrition_quality INTEGER CHECK(nutrition_quality >= 1 AND nutrition_quality <= 10),
        emotions_level INTEGER CHECK(emotions_level >= 1 AND emotions_level <= 10),
        intimacy_level INTEGER CHECK(intimacy_level >= 1 AND intimacy_level <= 10),
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
      )`,

      // –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–¥–ª—è –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞)
      `CREATE TABLE IF NOT EXISTS user_profiles (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        company TEXT,
        industry TEXT,
        expertise_offer TEXT,
        expertise_seeking TEXT,
        is_public BOOLEAN DEFAULT 0,
        linkedin_url TEXT,
        telegram_username TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
      )`,

      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      `CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)`,
      `CREATE INDEX IF NOT EXISTS idx_users_role ON users(role)`,
      `CREATE INDEX IF NOT EXISTS idx_trainings_user_id ON trainings(user_id)`,
      `CREATE INDEX IF NOT EXISTS idx_trainings_coach_id ON trainings(coach_id)`,
      `CREATE INDEX IF NOT EXISTS idx_trainings_date ON trainings(training_date)`,
      `CREATE INDEX IF NOT EXISTS idx_comments_user_id ON trainer_comments(user_id)`,
      `CREATE INDEX IF NOT EXISTS idx_comments_coach_id ON trainer_comments(coach_id)`,
      `CREATE INDEX IF NOT EXISTS idx_progress_user_id ON progress_updates(user_id)`
    ];

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ SQL –∫–æ–º–∞–Ω–¥—ã
    for (const sql of tables) {
      await this.run(sql);
    }

    console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ë–î —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    await this.runMigrations();
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async runMigrations() {
    try {
      console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–π...');
      
      // –ú–∏–≥—Ä–∞—Ü–∏—è 1: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ training_type –≤ trainer_comments –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      try {
        const columns = await this.all("PRAGMA table_info(trainer_comments)");
        const hasTrainingType = columns.some(col => col.name === 'training_type');
        
        if (!hasTrainingType) {
          console.log('üìÑ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ training_type –≤ trainer_comments...');
          await this.run('ALTER TABLE trainer_comments ADD COLUMN training_type TEXT DEFAULT "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"');
          console.log('‚úÖ –ü–æ–ª–µ training_type –¥–æ–±–∞–≤–ª–µ–Ω–æ');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è training_type –ø—Ä–æ–ø—É—â–µ–Ω–∞:', error.message);
      }
      
      // –ú–∏–≥—Ä–∞—Ü–∏—è 2: –î–µ–ª–∞–µ–º training_id nullable (SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç ALTER COLUMN –Ω–∞–ø—Ä—è–º—É—é)
      // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ–≤–∞—è —Å—Ö–µ–º–∞ —É–∂–µ –ø–æ–ø—Ä–∞–≤–ª–µ–Ω–∞
      
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:', error);
    }
  }


  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
  run(sql, params = []) {
    return new Promise((resolve, reject) => {
      this.db.run(sql, params, function(err) {
        if (err) reject(err);
        else resolve({ id: this.lastID, changes: this.changes });
      });
    });
  }

  get(sql, params = []) {
    return new Promise((resolve, reject) => {
      this.db.get(sql, params, (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });
  }

  all(sql, params = []) {
    return new Promise((resolve, reject) => {
      this.db.all(sql, params, (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  close() {
    return new Promise((resolve) => {
      if (this.db) {
        this.db.close((err) => {
          if (err) console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î:', err);
          else console.log('üì¥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
          resolve();
        });
      } else {
        resolve();
      }
    });
  }
}

module.exports = new Database();
