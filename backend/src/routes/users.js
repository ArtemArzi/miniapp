const express = require('express');
const database = require('../models/database');
const { authenticateToken, requireCoachOrAdmin } = require('../middleware/auth');

const router = express.Router();

// GET /api/users - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ - —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—ã)
router.get('/', authenticateToken, requireCoachOrAdmin, async (req, res) => {
  try {
    const { role, search, limit = 50, offset = 0 } = req.query;

    let whereClause = 'WHERE u.is_active = 1';
    let params = [];

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏
    if (role && ['client', 'coach', 'admin'].includes(role)) {
      whereClause += ' AND u.role = ?';
      params.push(role);
    } else if (req.user.role === 'coach') {
      // –¢—Ä–µ–Ω–µ—Ä—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
      whereClause += ' AND u.role = "client"';
    }

    // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ email
    if (search) {
      whereClause += ' AND (u.name LIKE ? OR u.email LIKE ?)';
      params.push(`%${search}%`, `%${search}%`);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç –∏ –æ—Ñ—Ñ—Å–µ—Ç
    params.push(parseInt(limit), parseInt(offset));

    const users = await database.all(`
      SELECT 
        u.id,
        u.email,
        u.name,
        u.role,
        u.phone,
        u.created_at as createdAt,
        COUNT(t.id) as totalTrainings,
        MAX(t.training_date) as lastTraining,
        COUNT(CASE WHEN tc.is_read = 0 THEN 1 END) as unreadComments
      FROM users u
      LEFT JOIN trainings t ON u.id = t.user_id AND t.attended = 1
      LEFT JOIN trainer_comments tc ON u.id = tc.user_id
      ${whereClause}
      GROUP BY u.id, u.email, u.name, u.role, u.phone, u.created_at
      ORDER BY u.name
      LIMIT ? OFFSET ?
    `, params);

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const countParams = params.slice(0, -2); // —É–±–∏—Ä–∞–µ–º limit –∏ offset
    const countResult = await database.get(`
      SELECT COUNT(DISTINCT u.id) as count
      FROM users u
      ${whereClause.replace('LIMIT ? OFFSET ?', '')}
    `, countParams);

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä–µ–π–¥–µ
    const usersWithGrades = await Promise.all(users.map(async (user) => {
      if (user.role === 'client') {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–µ–π–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        const gradeSystem = [
          { trainings: 0, name: "–ù–æ–≤–∏—á–æ–∫", emoji: "ü•ä" },
          { trainings: 10, name: "–î–µ—Ç—ë–Ω—ã—à", emoji: "üê±" },
          { trainings: 25, name: "–û—Ö–æ—Ç–Ω–∏–∫", emoji: "üéØ" },
          { trainings: 50, name: "–•–∏—â–Ω–∏–∫", emoji: "üî•" },
          { trainings: 75, name: "–ê–ª—å—Ñ–∞", emoji: "üëë" },
          { trainings: 100, name: "–ö–æ—Ä–æ–ª—å –¥–∂—É–Ω–≥–ª–µ–π", emoji: "ü¶Å" }
        ];

        let currentGrade = gradeSystem[0];
        for (let i = gradeSystem.length - 1; i >= 0; i--) {
          if (user.totalTrainings >= gradeSystem[i].trainings) {
            currentGrade = gradeSystem[i];
            break;
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –∞–Ω–∫–µ—Ç–∞ "–¢–æ—á–∫–∞ –ê"
        const pointAForm = await database.get(
          'SELECT id FROM point_a_forms WHERE user_id = ?',
          [user.id]
        );

        return {
          ...user,
          grade: currentGrade,
          hasCompletedPointA: !!pointAForm
        };
      }
      return user;
    }));

    res.json({
      message: '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      users: usersWithGrades,
      pagination: {
        total: countResult.count,
        limit: parseInt(limit),
        offset: parseInt(offset),
        hasMore: (parseInt(offset) + parseInt(limit)) < countResult.count
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' 
    });
  }
});

// GET /api/users/dashboard - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –∫–ª–∏–µ–Ω—Ç–∞
router.get('/dashboard', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;

    // –¢–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    if (req.user.role !== 'client') {
      return res.status(403).json({ 
        error: '–î–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–∞–º' 
      });
    }

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    const trainingStats = await database.get(`
      SELECT 
        COUNT(t.id) as totalTrainings,
        MAX(t.training_date) as lastTraining,
        COUNT(CASE WHEN t.training_date >= DATE('now', '-7 days') THEN 1 END) as trainingsThisWeek,
        COUNT(CASE WHEN t.training_date >= DATE('now', '-30 days') THEN 1 END) as trainingsThisMonth
      FROM trainings t
      WHERE t.user_id = ? AND t.attended = 1
    `, [userId]);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–µ–π–¥
    const gradeSystem = [
      { trainings: 0, name: "–ù–æ–≤–∏—á–æ–∫", emoji: "ü•ä", color: "bg-gray-100 text-gray-800" },
      { trainings: 10, name: "–î–µ—Ç—ë–Ω—ã—à", emoji: "üê±", color: "bg-blue-100 text-blue-800" },
      { trainings: 25, name: "–û—Ö–æ—Ç–Ω–∏–∫", emoji: "üéØ", color: "bg-green-100 text-green-800" },
      { trainings: 50, name: "–•–∏—â–Ω–∏–∫", emoji: "üî•", color: "bg-orange-100 text-orange-800" },
      { trainings: 75, name: "–ê–ª—å—Ñ–∞", emoji: "üëë", color: "bg-purple-100 text-purple-800" },
      { trainings: 100, name: "–ö–æ—Ä–æ–ª—å –¥–∂—É–Ω–≥–ª–µ–π", emoji: "ü¶Å", color: "bg-yellow-100 text-yellow-800" }
    ];

    let currentGrade = gradeSystem[0];
    let nextGrade = null;
    let progressToNextGrade = 0;

    for (let i = gradeSystem.length - 1; i >= 0; i--) {
      if (trainingStats.totalTrainings >= gradeSystem[i].trainings) {
        currentGrade = gradeSystem[i];
        if (i < gradeSystem.length - 1) {
          nextGrade = gradeSystem[i + 1];
          progressToNextGrade = ((trainingStats.totalTrainings - currentGrade.trainings) / 
                                (nextGrade.trainings - currentGrade.trainings)) * 100;
        }
        break;
      }
    }

    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤
    const recentComments = await database.all(`
      SELECT 
        tc.id,
        tc.comment_text as text,
        tc.is_read as isRead,
        tc.created_at as createdAt,
        u.name as coachName,
        t.training_type as trainingType
      FROM trainer_comments tc
      JOIN users u ON tc.coach_id = u.id
      LEFT JOIN trainings t ON tc.training_id = t.id
      WHERE tc.user_id = ?
      ORDER BY tc.created_at DESC
      LIMIT 5
    `, [userId]);

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    const unreadCount = await database.get(`
      SELECT COUNT(*) as count
      FROM trainer_comments
      WHERE user_id = ? AND is_read = 0
    `, [userId]);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã "–¢–æ—á–∫–∞ –ê" —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
    const pointAForm = await database.get(`
      SELECT 
        id,
        weight,
        body_fat_percentage as bodyFatPercentage,
        plank_time as plankTime,
        punches_per_minute as punchesPerMinute,
        energy_level as energy,
        stress_level as stress,
        sleep_quality as sleep,
        nutrition_quality as nutrition,
        emotions_level as emotions,
        intimacy_level as intimacy,
        goal_description as pointBGoal,
        created_at as createdAt,
        updated_at as updatedAt
      FROM point_a_forms 
      WHERE user_id = ?
    `, [userId]);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å Point A
    const latestProgress = await database.get(`
      SELECT 
        weight,
        body_fat_percentage as bodyFatPercentage,
        plank_time as plankTime,
        punches_per_minute as punchesPerMinute,
        energy_level as energy,
        stress_level as stress,
        sleep_quality as sleep,
        nutrition_quality as nutrition,
        emotions_level as emotions,
        intimacy_level as intimacy,
        created_at as createdAt
      FROM progress_updates 
      WHERE user_id = ?
      ORDER BY created_at DESC
      LIMIT 1
    `, [userId]);

    console.log(`üìã –î–∞—à–±–æ—Ä–¥ –¥–ª—è ${req.user.name}: ${trainingStats.totalTrainings} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –≥—Ä–µ–π–¥: ${currentGrade.name}`);

    res.json({
      message: '–î–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
      dashboard: {
        user: {
          id: req.user.id,
          name: req.user.name,
          email: req.user.email
        },
        stats: {
          totalTrainings: trainingStats.totalTrainings || 0,
          trainingsThisWeek: trainingStats.trainingsThisWeek || 0,
          trainingsThisMonth: trainingStats.trainingsThisMonth || 0,
          lastTraining: trainingStats.lastTraining
        },
        grade: {
          current: currentGrade,
          next: nextGrade,
          progressToNext: Math.round(progressToNextGrade),
          allGrades: gradeSystem
        },
        pointA: pointAForm,
        currentProgress: latestProgress,
        recentComments,
        notifications: {
          unreadComments: unreadCount.count || 0
        },
        hasCompletedPointA: !!pointAForm
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞' 
    });
  }
});

// GET /api/users/community - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
router.get('/community', authenticateToken, async (req, res) => {
  try {
    const { search, industry, limit = 50, offset = 0 } = req.query;

    let whereClause = 'WHERE u.is_active = 1 AND u.role = "client" AND up.is_public = 1';
    let params = [];

    // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–µ
    if (search) {
      whereClause += ' AND (u.name LIKE ? OR up.company LIKE ? OR up.industry LIKE ? OR up.expertise_offer LIKE ? OR up.expertise_seeking LIKE ?)';
      const searchTerm = `%${search}%`;
      params.push(searchTerm, searchTerm, searchTerm, searchTerm, searchTerm);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏
    if (industry) {
      whereClause += ' AND up.industry LIKE ?';
      params.push(`%${industry}%`);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç –∏ –æ—Ñ—Ñ—Å–µ—Ç
    params.push(parseInt(limit), parseInt(offset));

    const communityMembers = await database.all(`
      SELECT 
        u.id,
        u.name,
        u.email,
        up.company,
        up.industry,
        up.expertise_offer as canHelp,
        up.expertise_seeking as lookingFor,
        up.linkedin_url as linkedinUrl,
        up.telegram_username as telegramUsername,
        COUNT(t.id) as totalTrainings,
        MAX(t.training_date) as lastTraining
      FROM users u
      INNER JOIN user_profiles up ON u.id = up.user_id
      LEFT JOIN trainings t ON u.id = t.user_id AND t.attended = 1
      ${whereClause}
      GROUP BY u.id, u.name, u.email, up.company, up.industry, up.expertise_offer, up.expertise_seeking, up.linkedin_url, up.telegram_username
      ORDER BY u.name
      LIMIT ? OFFSET ?
    `, params);

    // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–µ–π–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const membersWithGrades = communityMembers.map(member => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–µ–π–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      const gradeSystem = [
        { trainings: 0, name: "–ù–æ–≤–∏—á–æ–∫", emoji: "ü•ä" },
        { trainings: 10, name: "–î–µ—Ç—ë–Ω—ã—à", emoji: "üê±" },
        { trainings: 25, name: "–û—Ö–æ—Ç–Ω–∏–∫", emoji: "üéØ" },
        { trainings: 50, name: "–•–∏—â–Ω–∏–∫", emoji: "üî•" },
        { trainings: 75, name: "–ê–ª—å—Ñ–∞", emoji: "üëë" },
        { trainings: 100, name: "–ö–æ—Ä–æ–ª—å –¥–∂—É–Ω–≥–ª–µ–π", emoji: "ü¶Å" }
      ];

      let currentGrade = gradeSystem[0];
      for (let i = gradeSystem.length - 1; i >= 0; i--) {
        if (member.totalTrainings >= gradeSystem[i].trainings) {
          currentGrade = gradeSystem[i];
          break;
        }
      }

      // –°–æ–∑–¥–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª—ã –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
      const nameParts = member.name.split(' ');
      const avatar = nameParts.length >= 2 
        ? nameParts[0][0] + nameParts[1][0] 
        : nameParts[0][0] + (nameParts[0][1] || '');

      return {
        ...member,
        grade: currentGrade,
        avatar: avatar.toUpperCase(),
        isPublic: true // –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ –ø—É–±–ª–∏—á–Ω—ã–µ
      };
    });

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const countParams = params.slice(0, -2); // —É–±–∏—Ä–∞–µ–º limit –∏ offset
    const countResult = await database.get(`
      SELECT COUNT(DISTINCT u.id) as count
      FROM users u
      INNER JOIN user_profiles up ON u.id = up.user_id
      ${whereClause.replace('LIMIT ? OFFSET ?', '')}
    `, countParams);

    console.log(`üèòÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${membersWithGrades.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞`);

    res.json({
      message: '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      members: membersWithGrades,
      pagination: {
        total: countResult.count,
        limit: parseInt(limit),
        offset: parseInt(offset),
        hasMore: (parseInt(offset) + parseInt(limit)) < countResult.count
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞' 
    });
  }
});

// GET /api/users/:userId - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
router.get('/:userId', authenticateToken, async (req, res) => {
  try {
    const { userId } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (req.user.role === 'client' && req.user.id !== parseInt(userId)) {
      return res.status(403).json({ 
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è' 
      });
    }

    const user = await database.get(`
      SELECT 
        u.id,
        u.email,
        u.name,
        u.role,
        u.phone,
        u.avatar_url,
        u.created_at as createdAt,
        up.company,
        up.industry,
        up.expertise_offer as expertiseOffer,
        up.expertise_seeking as expertiseSeeking,
        up.is_public as isPublic,
        up.linkedin_url as linkedinUrl,
        up.telegram_username as telegramUsername
      FROM users u
      LEFT JOIN user_profiles up ON u.id = up.user_id
      WHERE u.id = ? AND u.is_active = 1
    `, [userId]);

    if (!user) {
      return res.status(404).json({ 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    let stats = null;
    if (user.role === 'client') {
      const trainingStats = await database.get(`
        SELECT 
          COUNT(t.id) as totalTrainings,
          MAX(t.training_date) as lastTraining,
          COUNT(CASE WHEN t.training_date >= DATE('now', '-7 days') THEN 1 END) as trainingsThisWeek,
          COUNT(CASE WHEN t.training_date >= DATE('now', '-30 days') THEN 1 END) as trainingsThisMonth
        FROM trainings t
        WHERE t.user_id = ? AND t.attended = 1
      `, [userId]);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–µ–π–¥
      const gradeSystem = [
        { trainings: 0, name: "–ù–æ–≤–∏—á–æ–∫", emoji: "ü•ä" },
        { trainings: 10, name: "–î–µ—Ç—ë–Ω—ã—à", emoji: "üê±" },
        { trainings: 25, name: "–û—Ö–æ—Ç–Ω–∏–∫", emoji: "üéØ" },
        { trainings: 50, name: "–•–∏—â–Ω–∏–∫", emoji: "üî•" },
        { trainings: 75, name: "–ê–ª—å—Ñ–∞", emoji: "üëë" },
        { trainings: 100, name: "–ö–æ—Ä–æ–ª—å –¥–∂—É–Ω–≥–ª–µ–π", emoji: "ü¶Å" }
      ];

      let currentGrade = gradeSystem[0];
      let nextGrade = null;

      for (let i = gradeSystem.length - 1; i >= 0; i--) {
        if (trainingStats.totalTrainings >= gradeSystem[i].trainings) {
          currentGrade = gradeSystem[i];
          if (i < gradeSystem.length - 1) {
            nextGrade = gradeSystem[i + 1];
          }
          break;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∫–µ—Ç—É "–¢–æ—á–∫–∞ –ê"
      const pointAForm = await database.get(
        'SELECT id FROM point_a_forms WHERE user_id = ?',
        [userId]
      );

      stats = {
        ...trainingStats,
        currentGrade,
        nextGrade,
        hasCompletedPointA: !!pointAForm
      };
    }

    res.json({
      message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      user: {
        id: user.id,
        email: user.email,
        name: user.name,
        role: user.role,
        phone: user.phone,
        avatarUrl: user.avatar_url,
        createdAt: user.createdAt,
        profile: {
          company: user.company,
          industry: user.industry,
          expertiseOffer: user.expertiseOffer,
          expertiseSeeking: user.expertiseSeeking,
          isPublic: !!user.isPublic,
          linkedinUrl: user.linkedinUrl,
          telegramUsername: user.telegramUsername
        }
      },
      stats
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ' 
    });
  }
});

// GET /api/users/:userId/stats - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/:userId/stats', authenticateToken, async (req, res) => {
  try {
    const { userId } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (req.user.role === 'client' && req.user.id !== parseInt(userId)) {
      return res.status(403).json({ 
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º
    const user = await database.get(
      'SELECT id, name, role FROM users WHERE id = ? AND role = "client" AND is_active = 1',
      [userId]
    );

    if (!user) {
      return res.status(404).json({ 
        error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await database.get(`
      SELECT 
        COUNT(t.id) as totalTrainings,
        MAX(t.training_date) as lastTraining,
        MIN(t.training_date) as firstTraining,
        COUNT(CASE WHEN t.training_date >= DATE('now', '-7 days') THEN 1 END) as trainingsThisWeek,
        COUNT(CASE WHEN t.training_date >= DATE('now', '-30 days') THEN 1 END) as trainingsThisMonth,
        COUNT(CASE WHEN t.training_date >= DATE('now', '-90 days') THEN 1 END) as trainingsThisQuarter
      FROM trainings t
      WHERE t.user_id = ? AND t.attended = 1
    `, [userId]);

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    const commentStats = await database.get(`
      SELECT 
        COUNT(*) as totalComments,
        COUNT(CASE WHEN is_read = 0 THEN 1 END) as unreadComments
      FROM trainer_comments
      WHERE user_id = ?
    `, [userId]);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    const trainingTypes = await database.all(`
      SELECT 
        training_type,
        COUNT(*) as count
      FROM trainings
      WHERE user_id = ? AND attended = 1 AND training_date >= DATE('now', '-30 days')
      GROUP BY training_type
      ORDER BY count DESC
    `, [userId]);

    res.json({
      message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      user: {
        id: user.id,
        name: user.name
      },
      stats: {
        ...stats,
        ...commentStats,
        trainingTypes
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
    });
  }
});

// PUT /api/users/profile - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put('/profile', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const {
      name,
      phone,
      company,
      industry,
      canHelp,
      lookingFor,
      isPublic,
      linkedIn,
      telegram,
      bio
    } = req.body;

    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await database.run('BEGIN TRANSACTION');

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü–µ users
      if (name || phone) {
        await database.run(
          `UPDATE users 
           SET name = COALESCE(?, name), 
               phone = COALESCE(?, phone),
               updated_at = CURRENT_TIMESTAMP
           WHERE id = ?`,
          [name || null, phone || null, userId]
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –≤ user_profiles
      const existingProfile = await database.get(
        'SELECT id FROM user_profiles WHERE user_id = ?',
        [userId]
      );

      if (existingProfile) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        await database.run(
          `UPDATE user_profiles 
           SET company = COALESCE(?, company),
               industry = COALESCE(?, industry),
               expertise_offer = COALESCE(?, expertise_offer),
               expertise_seeking = COALESCE(?, expertise_seeking),
               is_public = COALESCE(?, is_public),
               linkedin_url = COALESCE(?, linkedin_url),
               telegram_username = COALESCE(?, telegram_username),
               updated_at = CURRENT_TIMESTAMP
           WHERE user_id = ?`,
          [
            company || null,
            industry || null,
            canHelp || null,
            lookingFor || null,
            isPublic !== undefined ? (isPublic ? 1 : 0) : null,
            linkedIn || null,
            telegram || null,
            userId
          ]
        );
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        await database.run(
          `INSERT INTO user_profiles (
            user_id, company, industry, expertise_offer, expertise_seeking, 
            is_public, linkedin_url, telegram_username
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            userId,
            company || null,
            industry || null,
            canHelp || null,
            lookingFor || null,
            isPublic ? 1 : 0,
            linkedIn || null,
            telegram || null
          ]
        );
      }

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await database.run('COMMIT');

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
      const updatedUser = await database.get(`
        SELECT 
          u.id,
          u.email,
          u.name,
          u.phone,
          u.role,
          u.avatar_url,
          u.created_at as createdAt,
          up.company,
          up.industry,
          up.expertise_offer as canHelp,
          up.expertise_seeking as lookingFor,
          up.is_public as isPublic,
          up.linkedin_url as linkedIn,
          up.telegram_username as telegram
        FROM users u
        LEFT JOIN user_profiles up ON u.id = up.user_id
        WHERE u.id = ?
      `, [userId]);

      console.log(`‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.name} (ID: ${userId})`);

      res.json({
        message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
        user: {
          id: updatedUser.id,
          email: updatedUser.email,
          name: updatedUser.name,
          phone: updatedUser.phone,
          role: updatedUser.role,
          avatarUrl: updatedUser.avatar_url,
          createdAt: updatedUser.createdAt,
          profile: {
            company: updatedUser.company,
            industry: updatedUser.industry,
            canHelp: updatedUser.canHelp,
            lookingFor: updatedUser.lookingFor,
            isPublic: !!updatedUser.isPublic,
            linkedIn: updatedUser.linkedIn,
            telegram: updatedUser.telegram
          }
        }
      });

    } catch (error) {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      await database.run('ROLLBACK');
      throw error;
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' 
    });
  }
});

// GET /api/users/:id - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (–¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤)
router.get('/:id', authenticateToken, requireCoachOrAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await database.get(`
      SELECT 
        u.id, 
        u.name, 
        u.email, 
        u.role, 
        u.is_active,
        u.created_at,
        COUNT(t.id) as totalTrainings,
        MAX(t.date) as lastTrainingDate
      FROM users u
      LEFT JOIN trainings t ON u.id = t.user_id
      WHERE u.id = ? AND u.is_active = 1
      GROUP BY u.id
    `, [id]);
    
    if (!user) {
      return res.status(404).json({ 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∑–≤–∞–Ω–∏–π
    const gradeSystem = [
      { trainings: 0, name: "–ù–æ–≤–∏—á–æ–∫", emoji: "ü•ä" },
      { trainings: 10, name: "–î–µ—Ç—ë–Ω—ã—à", emoji: "üê±" },
      { trainings: 25, name: "–û—Ö–æ—Ç–Ω–∏–∫", emoji: "üéØ" },
      { trainings: 50, name: "–•–∏—â–Ω–∏–∫", emoji: "üî•" },
      { trainings: 75, name: "–ê–ª—å—Ñ–∞", emoji: "üëë" },
      { trainings: 100, name: "–ö–æ—Ä–æ–ª—å –¥–∂—É–Ω–≥–ª–µ–π", emoji: "ü¶Å" }
    ];

    let currentGrade = gradeSystem[0];
    for (let i = gradeSystem.length - 1; i >= 0; i--) {
      if (user.totalTrainings >= gradeSystem[i].trainings) {
        currentGrade = gradeSystem[i];
        break;
      }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    let lastTraining = '–ù–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫';
    if (user.lastTrainingDate) {
      const lastDate = new Date(user.lastTrainingDate);
      const today = new Date();
      const diffDays = Math.ceil((today - lastDate) / (1000 * 60 * 60 * 24));
      
      if (diffDays === 0) {
        lastTraining = '–°–µ–≥–æ–¥–Ω—è';
      } else if (diffDays === 1) {
        lastTraining = '–í—á–µ—Ä–∞';
      } else if (diffDays < 7) {
        lastTraining = `${diffDays} –¥–Ω—è –Ω–∞–∑–∞–¥`;
      } else {
        lastTraining = lastDate.toLocaleDateString('ru-RU');
      }
    }

    res.json({
      message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
      user: {
        ...user,
        grade: currentGrade,
        joinDate: user.created_at,
        lastTraining: lastTraining
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
    });
  }
});

module.exports = router;
