const express = require('express');
const database = require('../models/database');
const { authenticateToken, requireCoachOrAdmin } = require('../middleware/auth');
const { validateTrainerComment } = require('../middleware/validation');

const router = express.Router();

// POST /api/comments - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞
router.post('/', authenticateToken, requireCoachOrAdmin, validateTrainerComment, async (req, res) => {
  try {
    const coachId = req.user.id;
    const { userId, comment, trainingType = '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞' } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º
    const client = await database.get(
      'SELECT id, name, email FROM users WHERE id = ? AND role = "client" AND is_active = 1',
      [userId]
    );

    if (!client) {
      return res.status(404).json({ 
        error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' 
      });
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ)
    const commentResult = await database.run(`
      INSERT INTO trainer_comments (user_id, coach_id, comment_text, training_type)
      VALUES (?, ?, ?, ?)
    `, [userId, coachId, comment, trainingType]);

    console.log(`üí¨ –¢—Ä–µ–Ω–µ—Ä ${req.user.name} –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç—É ${client.name}`);

    res.status(201).json({
      success: true,
      message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      comment: {
        id: commentResult.id,
        userId: parseInt(userId),
        coachId: coachId,
        coachName: req.user.name,
        comment: comment,
        trainingType: trainingType,
        createdAt: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è' 
    });
  }
});

// GET /api/comments - –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const { limit = 3, offset = 0, all = false } = req.query;
    
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —É–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç
    const actualLimit = all === 'true' ? 999 : parseInt(limit);

    let comments;
    let totalCount;

    if (req.user.role === 'client') {
      // –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ - –ø–æ–ª—É—á–∞–µ–º –∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      comments = await database.all(`
        SELECT 
          tc.id,
          tc.comment_text as comment,
          tc.is_read as isRead,
          tc.created_at as createdAt,
          COALESCE(tc.training_type, t.training_type, '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞') as trainingType,
          COALESCE(t.training_date, DATE(tc.created_at)) as trainingDate,
          u.name as coachName,
          u.email as coachEmail
        FROM trainer_comments tc
        LEFT JOIN trainings t ON tc.training_id = t.id
        JOIN users u ON tc.coach_id = u.id
        WHERE tc.user_id = ?
        ORDER BY tc.created_at DESC
        LIMIT ? OFFSET ?
      `, [userId, actualLimit, parseInt(offset)]);

      const countResult = await database.get(
        'SELECT COUNT(*) as count FROM trainer_comments WHERE user_id = ?',
        [userId]
      );
      totalCount = countResult.count;

      // –û—Ç–º–µ—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
      if (comments.length > 0) {
        await database.run(
          'UPDATE trainer_comments SET is_read = 1 WHERE user_id = ? AND is_read = 0',
          [userId]
        );
      }

    } else if (req.user.role === 'coach') {
      // –î–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ - –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∏ –æ—Å—Ç–∞–≤–∏–ª–∏
      comments = await database.all(`
        SELECT 
          tc.id,
          tc.comment_text as comment,
          tc.is_read as isRead,
          tc.created_at as createdAt,
          COALESCE(tc.training_type, t.training_type, '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞') as trainingType,
          COALESCE(t.training_date, DATE(tc.created_at)) as trainingDate,
          u.name as clientName,
          u.email as clientEmail,
          u.id as clientId
        FROM trainer_comments tc
        LEFT JOIN trainings t ON tc.training_id = t.id
        JOIN users u ON tc.user_id = u.id
        WHERE tc.coach_id = ?
        ORDER BY tc.created_at DESC
        LIMIT ? OFFSET ?
      `, [userId, actualLimit, parseInt(offset)]);

      const countResult = await database.get(
        'SELECT COUNT(*) as count FROM trainer_comments WHERE coach_id = ?',
        [userId]
      );
      totalCount = countResult.count;

    } else {
      // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ - –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      comments = await database.all(`
        SELECT 
          tc.id,
          tc.comment_text as comment,
          tc.is_read as isRead,
          tc.created_at as createdAt,
          t.training_type as trainingType,
          t.training_date as trainingDate,
          coach.name as coachName,
          coach.email as coachEmail,
          client.name as clientName,
          client.email as clientEmail,
          client.id as clientId
        FROM trainer_comments tc
        JOIN trainings t ON tc.training_id = t.id
        JOIN users coach ON tc.coach_id = coach.id
        JOIN users client ON tc.user_id = client.id
        ORDER BY tc.created_at DESC
        LIMIT ? OFFSET ?
      `, [actualLimit, parseInt(offset)]);

      const countResult = await database.get('SELECT COUNT(*) as count FROM trainer_comments');
      totalCount = countResult.count;
    }

    res.json({
      success: true,
      message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
      comments,
      pagination: {
        total: totalCount,
        limit: actualLimit,
        offset: parseInt(offset),
        hasMore: (parseInt(offset) + actualLimit) < totalCount,
        isShowingAll: all === 'true'
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤' 
    });
  }
});

// GET /api/comments/:userId - –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤)
router.get('/:userId', authenticateToken, requireCoachOrAdmin, async (req, res) => {
  try {
    const { userId } = req.params;
    const { limit = 3, offset = 0, all = false } = req.query;
    
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —É–±–∏—Ä–∞–µ–º –ª–∏–º–∏—Ç
    const actualLimit = all === 'true' ? 999 : parseInt(limit);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const client = await database.get(
      'SELECT id, name, email FROM users WHERE id = ? AND role = "client"',
      [userId]
    );

    if (!client) {
      return res.status(404).json({ 
        error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    const comments = await database.all(`
      SELECT 
        tc.id,
        tc.comment_text as comment,
        tc.is_read as isRead,
        tc.created_at as createdAt,
        COALESCE(tc.training_type, t.training_type, '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞') as trainingType,
        COALESCE(t.training_date, DATE(tc.created_at)) as trainingDate,
        u.name as coachName,
        u.email as coachEmail
      FROM trainer_comments tc
      LEFT JOIN trainings t ON tc.training_id = t.id
      JOIN users u ON tc.coach_id = u.id
      WHERE tc.user_id = ?
      ORDER BY tc.created_at DESC
      LIMIT ? OFFSET ?
    `, [userId, actualLimit, parseInt(offset)]);

    const countResult = await database.get(
      'SELECT COUNT(*) as count FROM trainer_comments WHERE user_id = ?',
      [userId]
    );

    res.json({
      success: true,
      message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
      client: {
        id: client.id,
        name: client.name,
        email: client.email
      },
      comments,
      pagination: {
        total: countResult.count,
        limit: actualLimit,
        offset: parseInt(offset),
        hasMore: (parseInt(offset) + actualLimit) < countResult.count,
        isShowingAll: all === 'true'
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫–ª–∏–µ–Ω—Ç–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫–ª–∏–µ–Ω—Ç–∞' 
    });
  }
});

// GET /api/comments/unread/count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
router.get('/unread/count', authenticateToken, async (req, res) => {
  try {
    if (req.user.role !== 'client') {
      return res.json({ unreadCount: 0 });
    }

    const result = await database.get(
      'SELECT COUNT(*) as count FROM trainer_comments WHERE user_id = ? AND is_read = 0',
      [req.user.id]
    );

    res.json({ 
      unreadCount: result.count 
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤' 
    });
  }
});

// PUT /api/comments/:id/read - –û—Ç–º–µ—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
router.put('/:id/read', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const comment = await database.get(
      'SELECT id FROM trainer_comments WHERE id = ? AND user_id = ?',
      [id, userId]
    );

    if (!comment) {
      return res.status(404).json({ 
        error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ' 
      });
    }

    // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
    await database.run(
      'UPDATE trainer_comments SET is_read = 1 WHERE id = ? AND user_id = ?',
      [id, userId]
    );

    console.log(`‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ${id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${req.user.name}`);

    res.json({
      message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π',
      commentId: parseInt(id)
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ' 
    });
  }
});

module.exports = router;
