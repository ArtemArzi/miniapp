const express = require('express');
const database = require('../models/database');
const { authenticateToken, requireCoachOrAdmin } = require('../middleware/auth');
const { validatePointAForm } = require('../middleware/validation');

const router = express.Router();

// POST /api/point-a - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã "–¢–æ—á–∫–∞ –ê"
router.post('/', authenticateToken, validatePointAForm, async (req, res) => {
  console.log('üìã –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã:', req.body);
  
  try {
    const userId = req.user.id;

    // –¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É "–¢–æ—á–∫–∞ –ê"
    if (req.user.role !== 'client') {
      return res.status(403).json({ 
        error: '–¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É "–¢–æ—á–∫–∞ –ê"' 
      });
    }

    const {
      weight,
      body_fat_percentage,
      plank_time,
      punches_per_minute,
      energy_level,
      stress_level,
      sleep_quality,
      nutrition_quality,
      emotions_level,
      intimacy_level,
      goal_description
    } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–Ω–∫–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingForm = await database.get(
      'SELECT id FROM point_a_forms WHERE user_id = ?',
      [userId]
    );

    if (existingForm) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
      await database.run(`
        UPDATE point_a_forms SET
          weight = ?,
          body_fat_percentage = ?,
          plank_time = ?,
          punches_per_minute = ?,
          energy_level = ?,
          stress_level = ?,
          sleep_quality = ?,
          nutrition_quality = ?,
          emotions_level = ?,
          intimacy_level = ?,
          goal_description = ?,
          updated_at = CURRENT_TIMESTAMP
        WHERE user_id = ?
      `, [
        weight, body_fat_percentage, plank_time, punches_per_minute,
        energy_level, stress_level, sleep_quality, nutrition_quality, emotions_level, intimacy_level,
        goal_description, userId
      ]);

      console.log(`‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞ "–¢–æ—á–∫–∞ –ê" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.email}`);

      res.json({ 
        message: '–ê–Ω–∫–µ—Ç–∞ "–¢–æ—á–∫–∞ –ê" –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        isUpdate: true
      });
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É
      const result = await database.run(`
        INSERT INTO point_a_forms (
          user_id, weight, body_fat_percentage, plank_time, punches_per_minute,
          energy_level, stress_level, sleep_quality, nutrition_quality,
          emotions_level, intimacy_level, goal_description
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `, [
        userId, weight, body_fat_percentage, plank_time, punches_per_minute,
        energy_level, stress_level, sleep_quality, nutrition_quality, emotions_level, intimacy_level, goal_description
      ]);

      console.log(`üìù –°–æ–∑–¥–∞–Ω–∞ –∞–Ω–∫–µ—Ç–∞ "–¢–æ—á–∫–∞ –ê" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.email} (ID: ${result.id})`);

      res.status(201).json({ 
        message: '–ê–Ω–∫–µ—Ç–∞ "–¢–æ—á–∫–∞ –ê" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        formId: result.id,
        isUpdate: false
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã "–¢–æ—á–∫–∞ –ê":', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã' 
    });
  }
});

// GET /api/point-a - –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã "–¢–æ—á–∫–∞ –ê" —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;

    // –¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—ã –∏–º–µ—é—Ç –∞–Ω–∫–µ—Ç—ã "–¢–æ—á–∫–∞ –ê"
    if (req.user.role !== 'client') {
      return res.status(403).json({ 
        error: '–¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—ã –∏–º–µ—é—Ç –∞–Ω–∫–µ—Ç—ã "–¢–æ—á–∫–∞ –ê"' 
      });
    }

    const form = await database.get(`
      SELECT 
        id,
        weight,
        body_fat_percentage as bodyFatPercentage,
        plank_time as plankTime,
        punches_per_minute as punchesPerMinute,
        energy_level as energy,
        stress_level as stress,
        sleep_quality as sleep,
        nutrition_quality as nutrition,
        emotions_level as emotions,
        intimacy_level as intimacy,
        goal_description as pointBGoal,
        created_at as createdAt,
        updated_at as updatedAt
      FROM point_a_forms 
      WHERE user_id = ?
    `, [userId]);

    if (!form) {
      return res.status(404).json({ 
        error: '–ê–Ω–∫–µ—Ç–∞ "–¢–æ—á–∫–∞ –ê" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        hasCompletedPointA: false
      });
    }

    res.json({
      message: '–ê–Ω–∫–µ—Ç–∞ "–¢–æ—á–∫–∞ –ê" –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      form,
      hasCompletedPointA: true
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã "–¢–æ—á–∫–∞ –ê":', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã' 
    });
  }
});

// GET /api/point-a/:userId - –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤)
router.get('/:userId', authenticateToken, requireCoachOrAdmin, async (req, res) => {
  try {
    const { userId } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º
    const user = await database.get(
      'SELECT id, name, email, role FROM users WHERE id = ? AND role = "client"',
      [userId]
    );

    if (!user) {
      return res.status(404).json({ 
        error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }

    const form = await database.get(`
      SELECT 
        id,
        weight,
        body_fat_percentage as bodyFatPercentage,
        plank_time as plankTime,
        punches_per_minute as punchesPerMinute,
        energy_level as energy,
        stress_level as stress,
        sleep_quality as sleep,
        nutrition_quality as nutrition,
        emotions_level as emotions,
        intimacy_level as intimacy,
        goal_description as pointBGoal,
        created_at as createdAt,
        updated_at as updatedAt
      FROM point_a_forms 
      WHERE user_id = ?
    `, [userId]);

    if (!form) {
      return res.status(404).json({ 
        error: '–ê–Ω–∫–µ—Ç–∞ "–¢–æ—á–∫–∞ –ê" –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        user: {
          id: user.id,
          name: user.name,
          email: user.email
        },
        hasCompletedPointA: false
      });
    }

    res.json({
      message: '–ê–Ω–∫–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      user: {
        id: user.id,
        name: user.name,
        email: user.email
      },
      form,
      hasCompletedPointA: true
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞:', error);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞' 
    });
  }
});

module.exports = router;
