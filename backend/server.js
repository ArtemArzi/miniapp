require('dotenv').config();
const express = require('express');
const path = require('path');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const database = require('./src/models/database');
const authRoutes = require('./src/routes/auth');
const pointARoutes = require('./src/routes/pointA');
const commentsRoutes = require('./src/routes/comments');
const usersRoutes = require('./src/routes/users');
const trainingsRoutes = require('./src/routes/trainings');
const progressRoutes = require('./src/routes/progress');
const webhookRoutes = require('./src/routes/webhook');
const { JaguarTelegramBot } = require('./src/telegram/bot');

const app = express();
const PORT = process.env.PORT || 3001;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ rate limiting
const limiter = rateLimit({
  windowMs: 24 * 60 * 60 * 1000,
  max: 10000,
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
});

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Middleware (–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –ü–û) ---
app.use(helmet());
app.use(limiter);
app.use(cors({
  origin: [
    process.env.FRONTEND_URL || 'http://localhost:5173',
    'http://localhost:5173',
    'http://localhost:5174',
    'http://localhost:5175'
  ],
  credentials: true
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ API ---
app.use('/api/auth', authRoutes);
app.use('/api/point-a', pointARoutes);
app.use('/api/comments', commentsRoutes);
app.use('/api/users', usersRoutes);
app.use('/api/trainings', trainingsRoutes);
app.use('/api/progress', progressRoutes);
app.use('/webhook', webhookRoutes);

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ—É—Ç–æ–≤
app.get('/api/test', (req, res) => {
  res.json({
    message: 'API —Ä–æ—É—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!',
    availableEndpoints: {
      'POST /api/auth/login': '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
      'POST /api/auth/register': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
    },
    note: '–í—Å–µ endpoints –∫—Ä–æ–º–µ auth —Ç—Ä–µ–±—É—é—Ç JWT —Ç–æ–∫–µ–Ω!'
  });
});

// =========================================================
// === –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (React/Vue) ===
// =========================================================
app.use(express.static(path.join(__dirname, '../dist')));

app.get('*', (req, res, next) => {
  // –ò—Å–∫–ª—é—á–∞–µ–º API —Ä–æ—É—Ç—ã –∏–∑ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
  if (req.originalUrl.startsWith('/api')) {
    return next();
  }
  res.sendFile(path.join(__dirname, '../dist/index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
  res.status(500).json({
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    message: process.env.NODE_ENV === 'development' ? err.message : '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –ë–î
async function startServer() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ JAGUAR FIGHT CLUB API...');
    
    // –°—Ä–∞–∑—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await database.init();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Bot
    if (process.env.TELEGRAM_BOT_TOKEN && process.env.DISABLE_TELEGRAM_BOT !== 'true') {
      try {
        console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot...');
        const botOptions = { polling: process.env.NODE_ENV !== 'production' ? true : false };
        const telegramBot = new JaguarTelegramBot(process.env.TELEGRAM_BOT_TOKEN, botOptions);
        app.locals.telegramBot = telegramBot;
        
        const botInfo = await telegramBot.getBotInfo();
        console.log(`‚úÖ Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @${botInfo.username}`);

        if (process.env.NODE_ENV === 'production' && process.env.TELEGRAM_WEBHOOK_URL) {
          await telegramBot.setupWebhook(process.env.TELEGRAM_WEBHOOK_URL);
          console.log(`üîó Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${process.env.TELEGRAM_WEBHOOK_URL}`);
        }
      } catch (botError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Bot:', botError.message);
      }
    } else {
      console.log('‚ÑπÔ∏è Telegram Bot –æ—Ç–∫–ª—é—á–µ–Ω (—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—Ç–æ–∏—Ç —Ñ–ª–∞–≥ DISABLE_TELEGRAM_BOT).');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ 0.0.0.0 –¥–ª—è Docker
    const server = app.listen(PORT, '0.0.0.0', () => {
      console.log(`üöÄ JAGUAR FIGHT CLUB API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
      console.log(`üéØ –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV}`);
    });
    
    app.locals.httpServer = server;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
const gracefulShutdown = async (signal) => {
  console.log(`\nüö´ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}...`);
  if (app.locals.httpServer) {
    app.locals.httpServer.close(async () => {
      console.log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      await database.close();
      process.exit(0);
    });
  } else {
    await database.close();
    process.exit(0);
  }
};

process.on('SIGINT', gracefulShutdown);
process.on('SIGTERM', gracefulShutdown);

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();

module.exports = app;