require('dotenv').config();
const express = require('express');
const path = require('path'); // –î–æ–±–∞–≤–ª–µ–Ω–∞ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const database = require('./src/models/database');
const authRoutes = require('./src/routes/auth');
const pointARoutes = require('./src/routes/pointA');
const commentsRoutes = require('./src/routes/comments');
const usersRoutes = require('./src/routes/users');
const trainingsRoutes = require('./src/routes/trainings');
const progressRoutes = require('./src/routes/progress');
const webhookRoutes = require('./src/routes/webhook');
const { JaguarTelegramBot } = require('./src/telegram/bot');

const app = express();
const PORT = process.env.PORT || 3001;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ rate limiting
const limiter = rateLimit({
  windowMs: 24 * 60 * 60 * 1000,
  max: 10000,
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
});

// --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Middleware (–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ –ü–û) ---
app.use(helmet());
app.use(limiter);
app.use(cors({
  origin: [
    process.env.FRONTEND_URL || 'http://localhost:5173',
    'http://localhost:5173',
    'http://localhost:5174',
    'http://localhost:5175'
  ],
  credentials: true
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ API ---
app.use('/api/auth', authRoutes);
app.use('/api/point-a', pointARoutes);
app.use('/api/comments', commentsRoutes);
app.use('/api/users', usersRoutes);
app.use('/api/trainings', trainingsRoutes);
app.use('/api/progress', progressRoutes);
app.use('/webhook', webhookRoutes);

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ—É—Ç–æ–≤
app.get('/api/test', (req, res) => {
  res.json({
    message: 'API —Ä–æ—É—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!',
    availableEndpoints: {
      'POST /api/auth/login': '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
      'POST /api/auth/register': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
      // ... –∏ –¥—Ä—É–≥–∏–µ –≤–∞—à–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    },
    note: '–í—Å–µ endpoints –∫—Ä–æ–º–µ auth —Ç—Ä–µ–±—É—é—Ç JWT —Ç–æ–∫–µ–Ω!'
  });
});


// =========================================================
// === –ù–û–í–´–ô –ë–õ–û–ö: –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (React) ===
// =========================================================
// –≠—Ç–æ—Ç –±–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ü–û–°–õ–ï –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ API

// 1. –£–∫–∞–∑—ã–≤–∞–µ–º Express, –≥–¥–µ –ª–µ–∂–∞—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (—Å–±–æ—Ä–∫–∞ React)
// –ü—É—Ç—å '../dist' –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, —Ç–∞–∫ –∫–∞–∫ server.js –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ /app/backend, –∞ —Å–±–æ—Ä–∫–∞ –≤ /app/dist
app.use(express.static(path.join(__dirname, '../dist')));

// 2. –ù–∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ /api/*) –æ—Ç–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
// –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Ä–æ—É—Ç–∏–Ω–≥ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ (React Router) —Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../dist/index.html'));
});


// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –ë–∞–∑–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/', (req, res) => {
  res.json({ 
    message: 'JAGUAR FIGHT CLUB API —Ä–∞–±–æ—Ç–∞–µ—Ç! ü¶Å',
    version: '1.0.0',
    timestamp: new Date().toISOString(),
    endpoints: {
      auth: '/api/auth (login, register, profile)',
      pointA: '/api/point-a (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç)',
      comments: '/api/comments (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–æ–≤)',
      users: '/api/users (—Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)',
      test: '/api/test (–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ endpoints)',
      docs: '/test/API_TESTING_FULL.md (–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)'
    }
  });
});

// –ó–¥–æ—Ä–æ–≤—å–µ API
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK',
    uptime: process.uptime(),
    timestamp: new Date().toISOString()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use('*', (req, res) => {
  res.status(404).json({ 
    error: 'Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
    path: req.originalUrl 
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
  res.status(500).json({ 
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    message: process.env.NODE_ENV === 'development' ? err.message : '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –ë–î
async function startServer() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await database.init();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Bot (–µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –∑–∞–¥–∞–Ω –∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω)
    let telegramBot = null;
    if (process.env.TELEGRAM_BOT_TOKEN && process.env.DISABLE_TELEGRAM_BOT !== 'true') {
      try {
        console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot...');
        
        // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        const botOptions = {
          polling: process.env.NODE_ENV !== 'production' ? {
            interval: 2000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            autoStart: true, // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            params: {
              timeout: 10 // –£–º–µ–Ω—å—à–∞–µ–º timeout
            }
          } : false
        };
        
        telegramBot = new JaguarTelegramBot(process.env.TELEGRAM_BOT_TOKEN, botOptions);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –≤ app.locals –¥–ª—è webhook
        app.locals.telegramBot = telegramBot;
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        const botInfo = await telegramBot.getBotInfo();
        console.log(`‚úÖ Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @${botInfo.username} (${botInfo.first_name})`);
        
        // –í production –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        if (process.env.NODE_ENV === 'production' && process.env.TELEGRAM_WEBHOOK_URL) {
          await telegramBot.setupWebhook(process.env.TELEGRAM_WEBHOOK_URL);
          console.log(`üîó Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${process.env.TELEGRAM_WEBHOOK_URL}`);
        }
        
      } catch (botError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Bot:', botError.message);
        console.log('üîÑ –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –±–µ–∑ Telegram Bot');
        console.log('‚ÑπÔ∏è  –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Telegram Bot —É–¥–∞–ª–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏–∑ .env');
      }
    } else {
      if (process.env.DISABLE_TELEGRAM_BOT === 'true') {
        console.log('‚ÑπÔ∏è  Telegram Bot –æ—Ç–∫–ª—é—á–µ–Ω (DISABLE_TELEGRAM_BOT=true)');
      } else {
        console.log('‚ÑπÔ∏è  TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω - Telegram Bot –æ—Ç–∫–ª—é—á–µ–Ω');
      }
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.listen(PORT, () => {
      console.log(`üöÄ JAGUAR FIGHT CLUB API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
      console.log(`üéØ –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV}`);
      console.log(`üìä API Endpoints:`);
      console.log(`   ‚ú® –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:`);
      console.log(`   - POST /api/auth/login - –í—Ö–æ–¥`);
      console.log(`   - POST /api/auth/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è`);
      console.log(`   - GET /api/auth/profile - –ü—Ä–æ—Ñ–∏–ª—å`);
      console.log(`   üìã –ê–Ω–∫–µ—Ç—ã "–¢–æ—á–∫–∞ –ê":`);
      console.log(`   - POST /api/point-a - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã`);
      console.log(`   - GET /api/point-a - –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã`);
      console.log(`   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:`);
      console.log(`   - POST /api/comments - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ (—Ç—Ä–µ–Ω–µ—Ä)`);
      console.log(`   - GET /api/comments - –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`);
      console.log(`   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:`);
      console.log(`   - GET /api/users - –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Ç—Ä–µ–Ω–µ—Ä)`);
      console.log(`   - GET /api/users/:id - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ`);
      console.log(``);
      console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: http://localhost:${PORT}/test/API_TESTING_FULL.md`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', async () => {
  console.log('\nüö´ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram Bot
  if (app.locals.telegramBot) {
    console.log('ü§ñ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram Bot...');
    app.locals.telegramBot.stop();
  }
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  await database.close();
  console.log('üëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();

module.exports = app;
