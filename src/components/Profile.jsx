import { useState, useEffect } from 'react'
import { useAuth } from '../contexts/AuthContext'
import { UsersAPI } from '../services/apiService'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Switch } from '@/components/ui/switch'
import { Badge } from '@/components/ui/badge'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { User, Building, Eye, EyeOff, Save, Loader2, AlertCircle, Settings, Trash2 } from 'lucide-react'
import MobileNavigation from './MobileNavigation'
import CacheManager from '../utils/cacheManager'

const Profile = () => {
  const { user } = useAuth()
  const [isEditing, setIsEditing] = useState(false)
  const [isLoading, setIsLoading] = useState(true)
  const [isSaving, setIsSaving] = useState(false)
  const [error, setError] = useState('')
  const [successMessage, setSuccessMessage] = useState('')
  const [isClearingCache, setIsClearingCache] = useState(false)
  
  const [profileData, setProfileData] = useState({
    name: user?.name || '',
    email: user?.email || '',
    company: '',
    industry: '',
    canHelp: '',
    lookingFor: '',
    isPublic: true,
    bio: '',
    linkedIn: '',
    telegram: ''
  })

  const [stats, setStats] = useState({
    totalTrainings: 0,
    status: '–ù–æ–≤–∏—á–æ–∫',
    joinDate: new Date().toISOString(),
    streak: 0
  })

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
  useEffect(() => {
    const loadProfile = async () => {
      try {
        setIsLoading(true)
        setError('')
        
        // –†–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
        const response = await UsersAPI.getUserProfile()
        
        if (response.user) {
          const userData = response.user
          const userProfile = userData.profile || {}
          
          setProfileData({
            name: userData.name || '',
            email: userData.email || '',
            company: userProfile.company || '',
            industry: userProfile.industry || '',
            canHelp: userProfile.expertiseOffer || '',
            lookingFor: userProfile.expertiseSeeking || '',
            isPublic: userProfile.isPublic || false,
            bio: userProfile.bio || '',
            linkedIn: userProfile.linkedinUrl || '',
            telegram: userProfile.telegramUsername || ''
          })
          
          // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ response (–±–∞–∑–æ–≤–∞—è)
          setStats({
            totalTrainings: response.stats?.totalTrainings || 0,
            status: response.stats?.currentGrade?.name || '–ù–æ–≤–∏—á–æ–∫',
            joinDate: userData.created_at || new Date().toISOString(),
            streak: 0
          })
        }
        
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error)
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è')
        
        // Fallback —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        setProfileData({
          name: user?.name || '',
          email: user?.email || '',
          company: '',
          industry: '',
          canHelp: '',
          lookingFor: '',
          isPublic: false,
          bio: '',
          linkedIn: '',
          telegram: ''
        })
        
        setStats({
          totalTrainings: 0,
          status: '–ù–æ–≤–∏—á–æ–∫',
          joinDate: new Date().toISOString(),
          streak: 0
        })
      } finally {
        setIsLoading(false)
      }
    }

    if (user) {
      loadProfile()
    }
  }, [user])

  const handleInputChange = (field, value) => {
    setProfileData(prev => ({
      ...prev,
      [field]: value
    }))
    
    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    if (successMessage) setSuccessMessage('')
    if (error) setError('')
  }

  const handleSave = async () => {
    try {
      setIsSaving(true)
      setError('')
      setSuccessMessage('')
      
      // –†–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
      await UsersAPI.updateProfile(profileData)
      
      setIsEditing(false)
      setSuccessMessage('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => setSuccessMessage(''), 3000)
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error)
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
    } finally {
      setIsSaving(false)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
  const handleClearCache = async () => {
    try {
      setIsClearingCache(true)
      setError('')
      setSuccessMessage('')
      
      console.log('üßπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞')
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫—ç—à–µ
      const cacheInfo = CacheManager.getCacheInfo()
      console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—ç—à–µ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π:', cacheInfo)
      
      // –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à
      const success = CacheManager.clearAllCache()
      
      if (success) {
        setSuccessMessage('–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω! –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã.')
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          window.location.reload(true)
        }, 2000)
      } else {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à')
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error)
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à: ' + (error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
    } finally {
      setIsClearingCache(false)
    }
  }

  const getStatusColor = (status) => {
    switch (status) {
      case '–ù–æ–≤–∏—á–æ–∫': return 'bg-blue-100 text-blue-800'
      case '–ë–æ–µ—Ü': return 'bg-green-100 text-green-800'
      case '–í–æ–∏–Ω': return 'bg-purple-100 text-purple-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (isLoading) {
    return (
      <div className="min-h-screen bg-background">
        <MobileNavigation />
        <div className="container mx-auto px-4 py-8">
          <div className="flex items-center justify-center min-h-[400px]">
            <div className="text-center">
              <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4" />
              <p className="text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</p>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background">
      <MobileNavigation />
      
      <div className="container mx-auto px-4 py-8">
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold mb-2">–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</h1>
            <p className="text-muted-foreground">–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏</p>
          </div>
          <Button 
            onClick={() => isEditing ? handleSave() : setIsEditing(true)}
            variant={isEditing ? "default" : "outline"}
            disabled={isSaving}
          >
            {isSaving ? (
              <>
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
              </>
            ) : isEditing ? (
              <>
                <Save className="w-4 h-4 mr-2" />
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </>
            ) : (
              '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'
            )}
          </Button>
        </div>
        
        {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∏ —É—Å–ø–µ—Ö–µ */}
        {error && (
          <Alert variant="destructive" className="mb-6">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}
        
        {successMessage && (
          <Alert className="mb-6 border-green-200 bg-green-50">
            <AlertCircle className="h-4 w-4 text-green-600" />
            <AlertDescription className="text-green-800">{successMessage}</AlertDescription>
          </Alert>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Main Profile Info */}
          <div className="lg:col-span-2 space-y-6">
            {/* Basic Information */}
            <Card>
              <CardHeader>
                <CardTitle>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</CardTitle>
                <CardDescription>
                  –í–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="name">–ò–º—è</Label>
                    <Input
                      id="name"
                      value={profileData.name}
                      onChange={(e) => handleInputChange('name', e.target.value)}
                      disabled={!isEditing}
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="email">Email</Label>
                    <Input
                      id="email"
                      type="email"
                      value={profileData.email}
                      onChange={(e) => handleInputChange('email', e.target.value)}
                      disabled={!isEditing}
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="company">–ö–æ–º–ø–∞–Ω–∏—è</Label>
                    <Input
                      id="company"
                      value={profileData.company}
                      onChange={(e) => handleInputChange('company', e.target.value)}
                      disabled={!isEditing}
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="industry">–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</Label>
                    <Input
                      id="industry"
                      value={profileData.industry}
                      onChange={(e) => handleInputChange('industry', e.target.value)}
                      disabled={!isEditing}
                    />
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="linkedIn">LinkedIn</Label>
                    <Input
                      id="linkedIn"
                      placeholder="https://linkedin.com/in/username"
                      value={profileData.linkedIn}
                      onChange={(e) => handleInputChange('linkedIn', e.target.value)}
                      disabled={!isEditing}
                    />
                  </div>
                  
                  <div className="space-y-2">
                    <Label htmlFor="telegram">Telegram</Label>
                    <Input
                      id="telegram"
                      placeholder="@username"
                      value={profileData.telegram}
                      onChange={(e) => handleInputChange('telegram', e.target.value)}
                      disabled={!isEditing}
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="bio">–û —Å–µ–±–µ</Label>
                  <Textarea
                    id="bio"
                    value={profileData.bio}
                    onChange={(e) => handleInputChange('bio', e.target.value)}
                    disabled={!isEditing}
                    rows={3}
                  />
                </div>
              </CardContent>
            </Card>

            {/* Networking Information */}
            <Card>
              <CardHeader>
                <CardTitle>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞</CardTitle>
                <CardDescription>
                  –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="canHelp">–ú–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω</Label>
                  <Textarea
                    id="canHelp"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ IT, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥..."
                    value={profileData.canHelp}
                    onChange={(e) => handleInputChange('canHelp', e.target.value)}
                    disabled={!isEditing}
                    rows={2}
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="lookingFor">–ò—â—É —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É</Label>
                  <Textarea
                    id="lookingFor"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏, –¥–∏–∑–∞–π–Ω, –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ..."
                    value={profileData.lookingFor}
                    onChange={(e) => handleInputChange('lookingFor', e.target.value)}
                    disabled={!isEditing}
                    rows={2}
                  />
                </div>
              </CardContent>
            </Card>

            {/* Privacy Settings */}
            <Card>
              <CardHeader>
                <CardTitle>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏</CardTitle>
                <CardDescription>
                  –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex items-center justify-between">
                  <div className="space-y-1">
                    <div className="flex items-center gap-2">
                      {profileData.isPublic ? (
                        <Eye className="w-4 h-4 text-green-600" />
                      ) : (
                        <EyeOff className="w-4 h-4 text-muted-foreground" />
                      )}
                      <Label htmlFor="public-profile">–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å</Label>
                    </div>
                    <p className="text-sm text-muted-foreground">
                      –î—Ä—É–≥–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–ª—É–±–∞ —Å–º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–°–æ–æ–±—â–µ—Å—Ç–≤–æ"
                    </p>
                  </div>
                  <Switch
                    id="public-profile"
                    checked={profileData.isPublic}
                    onCheckedChange={(checked) => handleInputChange('isPublic', checked)}
                    disabled={!isEditing}
                  />
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Sidebar - Stats and Status */}
          <div className="space-y-6">
            {/* Profile Avatar */}
            <Card>
              <CardContent className="pt-6">
                <div className="text-center">
                  <div className="w-24 h-24 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4">
                    <User className="w-12 h-12 text-primary" />
                  </div>
                  <h3 className="font-semibold text-lg">{profileData.name}</h3>
                  <p className="text-muted-foreground flex items-center justify-center gap-1">
                    <Building className="w-4 h-4" />
                    {profileData.company}
                  </p>
                </div>
              </CardContent>
            </Card>

            {/* Training Stats */}
            <Card>
              <CardHeader>
                <CardTitle>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-muted-foreground">–°—Ç–∞—Ç—É—Å</span>
                  <Badge className={getStatusColor(stats.status)}>
                    {stats.status}
                  </Badge>
                </div>
                
                <div className="flex justify-between items-center">
                  <span className="text-sm text-muted-foreground">–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</span>
                  <span className="font-medium">{stats.totalTrainings}</span>
                </div>
                
                <div className="flex justify-between items-center">
                  <span className="text-sm text-muted-foreground">–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è</span>
                  <span className="font-medium">{stats.streak} –¥–Ω–µ–π</span>
                </div>
                
                <div className="flex justify-between items-center">
                  <span className="text-sm text-muted-foreground">–í –∫–ª—É–±–µ —Å</span>
                  <span className="font-medium">
                    {new Date(stats.joinDate).toLocaleDateString('ru-RU')}
                  </span>
                </div>
              </CardContent>
            </Card>

            {/* Profile Visibility */}
            <Card>
              <CardHeader>
                <CardTitle>–í–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex items-center gap-2">
                    {profileData.isPublic ? (
                      <>
                        <Eye className="w-4 h-4 text-green-600" />
                        <span className="text-sm text-green-600">–ü—Ä–æ—Ñ–∏–ª—å –ø—É–±–ª–∏—á–Ω—ã–π</span>
                      </>
                    ) : (
                      <>
                        <EyeOff className="w-4 h-4 text-muted-foreground" />
                        <span className="text-sm text-muted-foreground">–ü—Ä–æ—Ñ–∏–ª—å —Å–∫—Ä—ã—Ç</span>
                      </>
                    )}
                  </div>
                  <p className="text-xs text-muted-foreground">
                    {profileData.isPublic 
                      ? '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–°–æ–æ–±—â–µ—Å—Ç–≤–æ" –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞'
                      : '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–∫—Ä—ã—Ç –æ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª—É–±–∞'
                    }
                  </p>
                </div>
              </CardContent>
            </Card>

            {/* Technical Settings */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Settings className="w-4 h-4" />
                  –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                </CardTitle>
                <CardDescription>
                  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <p className="text-sm text-muted-foreground">
                    –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à.
                  </p>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleClearCache}
                    disabled={isClearingCache}
                    className="w-full gap-2"
                  >
                    {isClearingCache ? (
                      <>
                        <Loader2 className="w-4 h-4 animate-spin" />
                        –û—á–∏—Å—Ç–∫–∞...
                      </>
                    ) : (
                      <>
                        <Trash2 className="w-4 h-4" />
                        –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
                      </>
                    )}
                  </Button>
                  <p className="text-xs text-muted-foreground">
                    ‚ö†Ô∏è –≠—Ç–æ –æ–±–Ω–æ–≤–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Profile

