import { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuth } from '../contexts/AuthContext'
import { PointAAPI } from '../services/apiService'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Slider } from '@/components/ui/slider'
import { Progress } from '@/components/ui/progress'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { ArrowLeft, ArrowRight, Target, Save, Loader2, AlertCircle, CheckCircle } from 'lucide-react'
import { LoadingSpinner } from './LoadingSpinner'

const PointAForm = () => {
  const { user, updateUser, isClient } = useAuth()
  const navigate = useNavigate()
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
  const [currentStep, setCurrentStep] = useState(1)
  const [isLoading, setIsLoading] = useState(true)
  const [isSaving, setIsSaving] = useState(false)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState('')
  const [isEditing, setIsEditing] = useState(false)
  
  const totalSteps = 3

  const [formData, setFormData] = useState({
    // Physical indicators
    weight: '',
    bodyFatPercentage: '',
    plankTime: '',
    punchesPerMinute: '',
    
    // Subjective assessments (1-10 scale)
    energy: [5],
    stress: [5],
    sleep: [5],
    nutrition: [5],
    emotions: [5],
    intimacy: [5],
    
    // Goal
    pointBGoal: ''
  })

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const loadExistingForm = async () => {
      if (!isClient()) {
        navigate('/')
        return
      }

      try {
        setIsLoading(true)
        console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–Ω–∫–µ—Ç—É...')
        
        const existingForm = await PointAAPI.getForm()
        
        if (existingForm.form) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞:', existingForm.form)
          setIsEditing(true)
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –≤ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
          const apiForm = existingForm.form
          setFormData({
            weight: apiForm.weight || '',
            bodyFatPercentage: apiForm.bodyFatPercentage || '',
            plankTime: apiForm.plankTime || '',
            punchesPerMinute: apiForm.punchesPerMinute || '',
            energy: [apiForm.energy || 5],
            stress: [apiForm.stress || 5],
            sleep: [apiForm.sleep || 5],
            nutrition: [apiForm.nutrition || 5],
            emotions: [apiForm.emotions || 5],
            intimacy: [apiForm.intimacy || 5],
            pointBGoal: apiForm.pointBGoal || ''
          })
        } else {
          console.log('üìù –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é')
          setIsEditing(false)
        }
      } catch (error) {
        if (error.status === 404) {
          console.log('üìù –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é')
          setIsEditing(false)
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∫–µ—Ç—ã:', error)
          setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message)
        }
      } finally {
        setIsLoading(false)
      }
    }

    loadExistingForm()
  }, [isClient, navigate])

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
    setError('') // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  }

  const handleSliderChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = () => {
    const errors = []
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    if (formData.weight) {
      const weight = Number(formData.weight);
      if (isNaN(weight) || weight < 30 || weight > 300) {
        errors.push('–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 30 –¥–æ 300 –∫–≥')
      }
    }
    
    if (formData.bodyFatPercentage) {
      const fat = Number(formData.bodyFatPercentage);
      if (isNaN(fat) || fat < 3 || fat > 50) {
        errors.push('–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 3 –¥–æ 50%')
      }
    }
    
    if (formData.plankTime) {
      const plank = Number(formData.plankTime);
      if (isNaN(plank) || plank < 0 || plank > 3600) {
        errors.push('–í—Ä–µ–º—è –ø–ª–∞–Ω–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 3600 —Å–µ–∫—É–Ω–¥')
      }
    }
    
    if (formData.punchesPerMinute) {
      const punches = Number(formData.punchesPerMinute);
      if (isNaN(punches) || punches < 0 || punches > 500) {
        errors.push('–£–¥–∞—Ä—ã –≤ –º–∏–Ω—É—Ç—É –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 500')
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ 10)
    const subjectiveFields = ['energy', 'stress', 'sleep', 'nutrition', 'mood', 'intimacy'];
    subjectiveFields.forEach(field => {
      if (formData[field] && formData[field][0]) {
        const value = Number(formData[field][0]);
        if (isNaN(value) || value < 1 || value > 10) {
          const fieldNames = {
            energy: '–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏',
            stress: '–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞', 
            sleep: '–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞',
            nutrition: '–ö–∞—á–µ—Å—Ç–≤–æ –ø–∏—Ç–∞–Ω–∏—è',
            mood: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
            intimacy: '–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å'
          };
          errors.push(`${fieldNames[field]} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10`);
        }
      }
    });

    if (!formData.pointBGoal.trim()) {
      errors.push('–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å "–¢–æ—á–∫–∞ –ë"')
    }

    return errors
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const handleSubmit = async () => {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã...');
    setError('')
    setSuccess('')
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é...');
    const validationErrors = validateForm()
    console.log('üìù –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', formData);
    console.log('‚ùó –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', validationErrors);
    
    if (validationErrors.length > 0) {
      console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:', validationErrors);
      setError(validationErrors.join('; '))
      return
    }

    try {
      setIsSaving(true)
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É "–¢–æ—á–∫–∞ –ê":', formData)
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç API (snake_case –¥–ª—è backend)
      const apiData = {
        weight: parseFloat(formData.weight) || null,
        body_fat_percentage: parseFloat(formData.bodyFatPercentage) || null,
        plank_time: parseInt(formData.plankTime) || null,
        punches_per_minute: parseInt(formData.punchesPerMinute) || null,
        energy_level: formData.energy[0],
        stress_level: formData.stress[0],
        sleep_quality: formData.sleep[0],
        nutrition_quality: formData.nutrition[0],
        emotions_level: formData.emotions[0],
        intimacy_level: formData.intimacy[0],
        goal_description: formData.pointBGoal.trim()
      }
      
      console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ API:', apiData);
      
      const result = await PointAAPI.saveForm(apiData)
      
      console.log('‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', result)
      setSuccess(isEditing ? '–ê–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!' : '–ê–Ω–∫–µ—Ç–∞ "–¢–æ—á–∫–∞ –ê" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      updateUser({ hasCompletedPointA: true })
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        navigate('/')
      }, 2000)
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã:', error)
      console.error('üìÑ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response || error.message)
      setError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + error.message)
    } finally {
      setIsSaving(false)
    }
  }

  const nextStep = () => {
    if (currentStep < totalSteps) {
      setCurrentStep(currentStep + 1)
    }
  }

  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1)
    }
  }

  // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
  if (isLoading) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <LoadingSpinner size="lg" text="–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∫–µ—Ç—ã..." />
      </div>
    )
  }

  // –ï—Å–ª–∏ –Ω–µ –∫–ª–∏–µ–Ω—Ç
  if (!isClient()) {
    return (
      <div className="min-h-screen bg-background flex items-center justify-center">
        <Alert className="max-w-md">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            –î–æ—Å—Ç—É–ø –∫ –∞–Ω–∫–µ—Ç–µ "–¢–æ—á–∫–∞ –ê" —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
          </AlertDescription>
        </Alert>
      </div>
    )
  }

  const renderStep1 = () => (
    <div className="space-y-6">
      <div className="text-center mb-6">
        <h2 className="text-2xl font-bold mb-2">–§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h2>
        <p className="text-muted-foreground">
          {isEditing ? '–û–±–Ω–æ–≤–∏—Ç–µ –≤–∞—à–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ' : '–ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤–∞—à—É "–¢–æ—á–∫—É –ê"'}
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-2">
          <Label htmlFor="weight">–í–µ—Å (–∫–≥)</Label>
          <Input
            id="weight"
            type="number"
            placeholder="75"
            value={formData.weight}
            onChange={(e) => handleInputChange('weight', e.target.value)}
            min="30"
            max="300"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="bodyFat">–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ (%)</Label>
          <Input
            id="bodyFat"
            type="number"
            placeholder="18"
            value={formData.bodyFatPercentage}
            onChange={(e) => handleInputChange('bodyFatPercentage', e.target.value)}
            min="3"
            max="50"
            step="0.1"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="plank">–í—Ä–µ–º—è –≤ –ø–ª–∞–Ω–∫–µ (—Å–µ–∫)</Label>
          <Input
            id="plank"
            type="number"
            placeholder="45"
            value={formData.plankTime}
            onChange={(e) => handleInputChange('plankTime', e.target.value)}
            min="0"
            max="3600"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="punches">–£–¥–∞—Ä—ã –≤ –º–∏–Ω—É—Ç—É</Label>
          <Input
            id="punches"
            type="number"
            placeholder="100"
            value={formData.punchesPerMinute}
            onChange={(e) => handleInputChange('punchesPerMinute', e.target.value)}
            min="0"
            max="500"
          />
        </div>
      </div>
    </div>
  )

  const renderStep2 = () => (
    <div className="space-y-6">
      <div className="text-center mb-6">
        <h2 className="text-2xl font-bold mb-2">–°—É–±—ä–µ–∫—Ç–∏–≤–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏</h2>
        <p className="text-muted-foreground">–û—Ü–µ–Ω–∏—Ç–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10</p>
      </div>

      <div className="space-y-8">
        {[
          { key: 'energy', label: '–£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏', description: '1 - –∫—Ä–∞–π–Ω–µ –Ω–∏–∑–∫–∏–π, 10 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π' },
          { key: 'stress', label: '–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞', description: '1 - –Ω–µ—Ç —Å—Ç—Ä–µ—Å—Å–∞, 10 - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π' },
          { key: 'sleep', label: '–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞', description: '1 - –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ, 10 - –æ—Ç–ª–∏—á–Ω–æ–µ' },
          { key: 'nutrition', label: '–ö–∞—á–µ—Å—Ç–≤–æ –ø–∏—Ç–∞–Ω–∏—è', description: '1 - –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ, 10 - –∏–¥–µ–∞–ª—å–Ω–æ–µ' },
          { key: 'emotions', label: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', description: '1 - –¥–µ–ø—Ä–µ—Å—Å–∏—è, 10 - —ç–π—Ñ–æ—Ä–∏—è' },
          { key: 'intimacy', label: '–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å', description: '1 - –∫—Ä–∞–π–Ω–µ –Ω–∏–∑–∫–∞—è, 10 - –æ—Ç–ª–∏—á–Ω–∞—è' }
        ].map(({ key, label, description }) => (
          <div key={key} className="space-y-3">
            <div className="flex justify-between items-center">
              <Label>{label}</Label>
              <span className="text-2xl font-bold text-primary">{formData[key][0]}</span>
            </div>
            <Slider
              value={formData[key]}
              onValueChange={(value) => handleSliderChange(key, value)}
              max={10}
              min={1}
              step={1}
              className="w-full"
            />
            <p className="text-sm text-muted-foreground">{description}</p>
          </div>
        ))}
      </div>
    </div>
  )

  const renderStep3 = () => (
    <div className="space-y-6">
      <div className="text-center mb-6">
        <h2 className="text-2xl font-bold mb-2">–í–∞—à–∞ —Ü–µ–ª—å "–¢–æ—á–∫–∞ –ë"</h2>
        <p className="text-muted-foreground">–û–ø–∏—à–∏—Ç–µ, —á–µ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å</p>
      </div>

      <div className="space-y-4">
        <Label htmlFor="goal">–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π —Ü–µ–ª–∏</Label>
        <Textarea
          id="goal"
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –•–æ—á—É —É–ª—É—á—à–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É, —Å–Ω–∏–∑–∏—Ç—å —Å—Ç—Ä–µ—Å—Å, –Ω–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É, –∏–∑—É—á–∏—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ –º—É–∞–π —Ç–∞–π..."
          value={formData.pointBGoal}
          onChange={(e) => handleInputChange('pointBGoal', e.target.value)}
          rows={6}
          maxLength={1000}
        />
        <p className="text-sm text-muted-foreground text-right">
          {formData.pointBGoal.length}/1000 —Å–∏–º–≤–æ–ª–æ–≤
        </p>
      </div>

      {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
      <Card className="mt-8">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="h-5 w-5" />
            –°–≤–æ–¥–∫–∞ –≤–∞—à–µ–π "–¢–æ—á–∫–∏ –ê"
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
            {formData.weight && (
              <div>
                <strong>–í–µ—Å:</strong> {formData.weight} –∫–≥
              </div>
            )}
            {formData.bodyFatPercentage && (
              <div>
                <strong>–ñ–∏—Ä:</strong> {formData.bodyFatPercentage}%
              </div>
            )}
            {formData.plankTime && (
              <div>
                <strong>–ü–ª–∞–Ω–∫–∞:</strong> {formData.plankTime} —Å–µ–∫
              </div>
            )}
            {formData.punchesPerMinute && (
              <div>
                <strong>–£–¥–∞—Ä—ã:</strong> {formData.punchesPerMinute}/–º–∏–Ω
              </div>
            )}
          </div>
          
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4 text-sm">
            <div>–≠–Ω–µ—Ä–≥–∏—è: <strong>{formData.energy[0]}/10</strong></div>
            <div>–°—Ç—Ä–µ—Å—Å: <strong>{formData.stress[0]}/10</strong></div>
            <div>–°–æ–Ω: <strong>{formData.sleep[0]}/10</strong></div>
            <div>–ü–∏—Ç–∞–Ω–∏–µ: <strong>{formData.nutrition[0]}/10</strong></div>
            <div>–≠–º–æ—Ü–∏–∏: <strong>{formData.emotions[0]}/10</strong></div>
            <div>–ò–Ω—Ç–∏–º–Ω–æ—Å—Ç—å: <strong>{formData.intimacy[0]}/10</strong></div>
          </div>
        </CardContent>
      </Card>
    </div>
  )

  return (
    <div className="min-h-screen bg-background py-8 px-4">
      <div className="max-w-2xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold mb-2">
            {isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã "–¢–æ—á–∫–∞ –ê"' : '–ê–Ω–∫–µ—Ç–∞ "–¢–æ—á–∫–∞ –ê"'}
          </h1>
          <p className="text-muted-foreground">
            {isEditing ? '–û–±–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏' : '–ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ'}
          </p>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
        <div className="mb-8">
          <div className="flex justify-between text-sm text-muted-foreground mb-2">
            <span>–®–∞–≥ {currentStep} –∏–∑ {totalSteps}</span>
            <span>{Math.round((currentStep / totalSteps) * 100)}%</span>
          </div>
          <Progress value={(currentStep / totalSteps) * 100} className="w-full" />
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
        {error && (
          <Alert variant="destructive" className="mb-6">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        {success && (
          <Alert className="mb-6 border-green-200 bg-green-50">
            <CheckCircle className="h-4 w-4 text-green-600" />
            <AlertDescription className="text-green-800">{success}</AlertDescription>
          </Alert>
        )}

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ñ–æ—Ä–º—ã */}
        <Card>
          <CardContent className="pt-6">
            {currentStep === 1 && renderStep1()}
            {currentStep === 2 && renderStep2()}
            {currentStep === 3 && renderStep3()}
          </CardContent>
        </Card>

        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="flex justify-between mt-8">
          <Button
            variant="outline"
            onClick={prevStep}
            disabled={currentStep === 1}
          >
            <ArrowLeft className="mr-2 h-4 w-4" />
            –ù–∞–∑–∞–¥
          </Button>

          {currentStep < totalSteps ? (
            <Button onClick={nextStep}>
              –î–∞–ª–µ–µ
              <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          ) : (
            <Button 
              onClick={handleSubmit}
              disabled={isSaving}
              className="min-w-[120px]"
            >
              {isSaving ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                </>
              ) : (
                <>
                  <Save className="mr-2 h-4 w-4" />
                  {isEditing ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                </>
              )}
            </Button>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ */}
        <div className="text-center mt-6">
          <Button 
            variant="ghost" 
            onClick={() => navigate('/')}
            disabled={isSaving}
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </Button>
        </div>
      </div>
    </div>
  )
}

export default PointAForm
