import { useState, useEffect } from 'react'
import { useAuth } from '../contexts/AuthContext'
import { UsersAPI } from '../services/apiService'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Users, Search, Building, Briefcase, MessageCircle, Loader2, AlertCircle, RefreshCw, Send } from 'lucide-react'
import MobileNavigation from './MobileNavigation'
import { useTelegram } from '../utils/telegram'

const Community = () => {
  const { user, isAuthenticated } = useAuth()
  const telegram = useTelegram()
  const [searchTerm, setSearchTerm] = useState('')
  
  // API —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [members, setMembers] = useState([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState(null)
  const [isRefreshing, setIsRefreshing] = useState(false)

  // –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
  const loadCommunityMembers = async (showRefreshIndicator = false) => {
    try {
      if (showRefreshIndicator) {
        setIsRefreshing(true)
      } else {
        setIsLoading(true)
      }
      setError(null)

      console.log('üèòÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞...')
      
      const params = {}
      if (searchTerm.trim()) {
        params.search = searchTerm.trim()
      }
      
      const response = await UsersAPI.getCommunityMembers(params)
      console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.members.length)
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      const transformedMembers = response.members.map(member => ({
        id: member.id,
        name: member.name,
        company: member.company || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        industry: member.industry || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        status: member.grade?.name || '–ù–æ–≤–∏—á–æ–∫',
        statusEmoji: member.grade?.emoji || 'ü•ä',
        trainings: member.totalTrainings || 0,
        canHelp: member.canHelp || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        lookingFor: member.lookingFor || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        isPublic: member.isPublic,
        avatar: member.avatar,
        linkedinUrl: member.linkedinUrl,
        telegramUsername: member.telegramUsername
      }))
      
      setMembers(transformedMembers)
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:', error)
      setError(error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞')
    } finally {
      setIsLoading(false)
      setIsRefreshing(false)
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (isAuthenticated) {
      loadCommunityMembers()
    }
  }, [isAuthenticated])

  // –ü–æ–∏—Å–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  useEffect(() => {
    if (!isAuthenticated) return
    
    const timeoutId = setTimeout(() => {
      loadCommunityMembers()
    }, 500)

    return () => clearTimeout(timeoutId)
  }, [searchTerm, isAuthenticated])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
  const handleRefresh = () => {
    loadCommunityMembers(true)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Telegram —á–∞—Ç–∞
  const handleTelegramContact = (member) => {
    if (!member.telegramUsername) {
      // –ï—Å–ª–∏ Telegram WebApp –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (telegram.isWebApp) {
        telegram.notifications.showAlert('–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω Telegram username')
      } else {
        alert('–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω Telegram username')
      }
      return
    }

    try {
      // –û—á–∏—â–∞–µ–º username –æ—Ç —Å–∏–º–≤–æ–ª–∞ @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      const cleanUsername = member.telegramUsername.replace(/^@/, '')
      const telegramUrl = `https://t.me/${cleanUsername}`
      
      console.log(`üîó –û—Ç–∫—Ä—ã–≤–∞–µ–º Telegram —á–∞—Ç —Å ${member.name}: ${telegramUrl}`)
      
      // –ï—Å–ª–∏ –≤ Telegram WebApp - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π API
      if (telegram.isWebApp) {
        telegram.data.openTelegramLink(telegramUrl)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        telegram.notifications.showAlert(
          `–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —á–∞—Ç —Å ${member.name} –≤ Telegram`
        )
      } else {
        // Fallback –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
        window.open(telegramUrl, '_blank')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è Telegram —á–∞—Ç–∞:', error)
      
      if (telegram.isWebApp) {
        telegram.notifications.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ Telegram')
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ Telegram')
      }
    }
  }

  const getStatusColor = (status) => {
    switch (status) {
      case '–ù–æ–≤–∏—á–æ–∫': return 'bg-gray-100 text-gray-800'
      case '–î–µ—Ç—ë–Ω—ã—à': return 'bg-blue-100 text-blue-800'
      case '–û—Ö–æ—Ç–Ω–∏–∫': return 'bg-green-100 text-green-800'
      case '–•–∏—â–Ω–∏–∫': return 'bg-orange-100 text-orange-800'
      case '–ê–ª—å—Ñ–∞': return 'bg-purple-100 text-purple-800'
      case '–ö–æ—Ä–æ–ª—å –¥–∂—É–Ω–≥–ª–µ–π': return 'bg-yellow-100 text-yellow-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-background">
        <MobileNavigation />
        <div className="container mx-auto mobile-container mobile-scroll-container px-4 py-8">
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É
            </AlertDescription>
          </Alert>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-background">
      <MobileNavigation />
      
      <div className="container mx-auto mobile-container mobile-scroll-container px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold mb-2">–°–æ–æ–±—â–µ—Å—Ç–≤–æ –∫–ª—É–±–∞</h1>
          <p className="text-muted-foreground">–ó–Ω–∞–∫–æ–º—å—Ç–µ—Å—å –∏ –Ω–∞–ª–∞–∂–∏–≤–∞–π—Ç–µ —Å–≤—è–∑–∏ —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏</p>
        </div>

        {/* Search and Stats */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8">
          <div className="relative w-full md:w-96">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
            <Input
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, –∫–æ–º–ø–∞–Ω–∏–∏, —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–µ..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
              disabled={isLoading}
            />
          </div>
          
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-1 text-sm text-muted-foreground">
              <Users className="w-4 h-4" />
              <span>{members.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
            </div>
            <Button 
              variant="outline" 
              size="sm"
              onClick={handleRefresh}
              disabled={isLoading}
            >
              <RefreshCw className={`w-4 h-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />
              –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
          </div>
        </div>

        {/* Loading and Error States */}
        {isLoading && !isRefreshing && (
          <div className="flex justify-center items-center py-12">
            <Loader2 className="h-8 w-8 animate-spin" />
            <span className="ml-2">–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞...</span>
          </div>
        )}

        {error && (
          <Alert variant="destructive" className="mb-6">
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              {error}
              <Button 
                variant="outline" 
                size="sm" 
                onClick={handleRefresh}
                className="ml-2"
              >
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </Button>
            </AlertDescription>
          </Alert>
        )}

        {/* Members Grid */}
        {!isLoading && members.length > 0 && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {members.map((member) => (
            <Card key={member.id} className="hover:shadow-lg transition-shadow">
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex items-center space-x-3">
                    <div className="w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center relative">
                      <span className="font-medium text-primary">{member.avatar}</span>
                      {member.telegramUsername && (
                        <div className="absolute -bottom-1 -right-1 w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                          <Send className="w-3 h-3 text-white" />
                        </div>
                      )}
                    </div>
                    <div>
                      <CardTitle className="text-lg flex items-center gap-2">
                        {member.name}
                        {member.telegramUsername && (
                          <Badge variant="secondary" className="text-xs">
                            <Send className="w-3 h-3 mr-1" />
                            Telegram
                          </Badge>
                        )}
                      </CardTitle>
                      <CardDescription className="flex items-center gap-1">
                        <Building className="w-3 h-3" />
                        {member.company}
                      </CardDescription>
                    </div>
                  </div>
                  <Badge className={getStatusColor(member.status)}>
                    {member.status}
                  </Badge>
                </div>
              </CardHeader>
              
              <CardContent className="space-y-4">
                <div className="flex items-center gap-2 text-sm text-muted-foreground">
                  <Briefcase className="w-4 h-4" />
                  <span>{member.industry}</span>
                  <span>‚Ä¢</span>
                  <span>{member.trainings} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</span>
                </div>

                <div className="space-y-3">
                  <div>
                    <h4 className="text-sm font-medium text-green-700 mb-1">–ú–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω:</h4>
                    <p className="text-sm text-muted-foreground">{member.canHelp}</p>
                  </div>
                  
                  <div>
                    <h4 className="text-sm font-medium text-blue-700 mb-1">–ò—â—É —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É:</h4>
                    <p className="text-sm text-muted-foreground">{member.lookingFor}</p>
                  </div>
                </div>

                <Button 
                  variant="outline" 
                  className="w-full" 
                  size="sm"
                  onClick={() => handleTelegramContact(member)}
                  disabled={!member.telegramUsername}
                >
                  <Send className="w-4 h-4 mr-2" />
                  {member.telegramUsername ? '–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram' : 'Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>
        )}

        {/* Empty State */}
        {!isLoading && !error && members.length === 0 && (
          <div className="text-center py-12">
            <Users className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-medium mb-2">–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p className="text-muted-foreground">
              {searchTerm ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å' : '–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ'}
            </p>
          </div>
        )}

        {/* Community Guidelines */}
        <Card className="mt-8">
          <CardHeader>
            <CardTitle>–ü—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</CardTitle>
            <CardDescription>
              –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π —Å—Ä–µ–¥—ã –¥–ª—è –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div>
                <h4 className="font-medium mb-2">‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è:</h4>
                <ul className="space-y-1 text-muted-foreground">
                  <li>‚Ä¢ –í–∑–∞–∏–º–æ–ø–æ–º–æ—â—å –∏ –æ–±–º–µ–Ω –æ–ø—ã—Ç–æ–º</li>
                  <li>‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ</li>
                  <li>‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ</li>
                  <li>‚Ä¢ –û–±–º–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞</li>
                </ul>
              </div>
              <div>
                <h4 className="font-medium mb-2">‚ùå –ù–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è:</h4>
                <ul className="space-y-1 text-muted-foreground">
                  <li>‚Ä¢ –°–ø–∞–º –∏ –Ω–∞–≤—è–∑—á–∏–≤–∞—è —Ä–µ–∫–ª–∞–º–∞</li>
                  <li>‚Ä¢ –ù–µ—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ</li>
                  <li>‚Ä¢ –†–∞–∑–≥–ª–∞—à–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</li>
                  <li>‚Ä¢ –û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –∏ —Ä–µ–ª–∏–≥–∏–∏</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

export default Community

