import { useState, useEffect, useRef } from 'react'
import { useNavigate, useLocation } from 'react-router-dom'
import { hapticFeedback } from '../utils/haptic'

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è swipe –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç swipe left/right –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏
 */
const SwipeNavigation = ({ children, disabled = false }) => {
  const navigate = useNavigate()
  const location = useLocation()
  const [touchStart, setTouchStart] = useState(null)
  const [touchEnd, setTouchEnd] = useState(null)
  const containerRef = useRef(null)

  // –ü–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è swipe –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const sections = [
    { path: '/', name: '–ì–ª–∞–≤–Ω–∞—è' },
    { path: '/progress', name: '–ü—Ä–æ–≥—Ä–µ—Å—Å' },
    { path: '/community', name: '–°–æ–æ–±—â–µ—Å—Ç–≤–æ' },
    { path: '/profile', name: '–ü—Ä–æ—Ñ–∏–ª—å' }
  ]

  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è swipe
  const MIN_SWIPE_DISTANCE = 50

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Ä–∞–∑–¥–µ–ª–∞
  const getCurrentSectionIndex = () => {
    const currentPath = location.pathname
    return sections.findIndex(section => section.path === currentPath)
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ touch
  const handleTouchStart = (e) => {
    if (disabled) return
    setTouchEnd(null)
    setTouchStart(e.targetTouches[0].clientX)
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è touch
  const handleTouchMove = (e) => {
    if (disabled) return
    setTouchEnd(e.targetTouches[0].clientX)
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è touch
  const handleTouchEnd = () => {
    if (!touchStart || !touchEnd) return
    
    const distance = touchStart - touchEnd
    const isLeftSwipe = distance > MIN_SWIPE_DISTANCE
    const isRightSwipe = distance < -MIN_SWIPE_DISTANCE

    if (isLeftSwipe || isRightSwipe) {
      const currentIndex = getCurrentSectionIndex()
      let newIndex = currentIndex

      if (isLeftSwipe && currentIndex < sections.length - 1) {
        // Swipe left - —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª
        newIndex = currentIndex + 1
      } else if (isRightSwipe && currentIndex > 0) {
        // Swipe right - –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∞–∑–¥–µ–ª
        newIndex = currentIndex - 1
      }

      if (newIndex !== currentIndex && newIndex >= 0 && newIndex < sections.length) {
        console.log(`üîÑ Swipe navigation: ${sections[currentIndex]?.name} ‚Üí ${sections[newIndex]?.name}`)
        hapticFeedback.swipe()
        navigate(sections[newIndex].path)
      }
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è swipe
  const [showSwipeHint, setShowSwipeHint] = useState(false)

  useEffect(() => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏—è
    const hasSeenSwipeHint = localStorage.getItem('hasSeenSwipeHint')
    if (!hasSeenSwipeHint) {
      setShowSwipeHint(true)
      setTimeout(() => {
        setShowSwipeHint(false)
        localStorage.setItem('hasSeenSwipeHint', 'true')
      }, 3000)
    }
  }, [])

  return (
    <div 
      ref={containerRef}
      className="relative h-full w-full"
      onTouchStart={handleTouchStart}
      onTouchMove={handleTouchMove}
      onTouchEnd={handleTouchEnd}
    >
      {/* –í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è swipe */}
      {showSwipeHint && (
        <div className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50 bg-black/80 text-white px-4 py-2 rounded-lg text-sm pointer-events-none">
          <div className="flex items-center gap-2">
            <span>‚Üê</span>
            <span>–°–≤–∞–π–ø–∞–π—Ç–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</span>
            <span>‚Üí</span>
          </div>
        </div>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      {children}
    </div>
  )
}

export default SwipeNavigation