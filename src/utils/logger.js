// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Jaguar Fight Club
// –£–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∞–º–∏ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∏–∑–±—ã—Ç–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ

const isDevelopment = import.meta.env.MODE === 'development';

// –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const LogLevel = {
  ERROR: 'error',
  WARN: 'warn', 
  INFO: 'info',
  DEBUG: 'debug'
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const LogColors = {
  [LogLevel.ERROR]: 'color: #ff4444; font-weight: bold;',
  [LogLevel.WARN]: 'color: #ffaa00; font-weight: bold;',
  [LogLevel.INFO]: 'color: #4444ff;',
  [LogLevel.DEBUG]: 'color: #888888;'
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(level, message, context = null, error = null) {
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
  if (!isDevelopment && level !== LogLevel.ERROR) {
    return;
  }

  const timestamp = new Date().toLocaleTimeString();
  const prefix = `[${timestamp}] ${level.toUpperCase()}:`;
  
  if (isDevelopment) {
    // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å —Ü–≤–µ—Ç–∞–º–∏
    console.log(`%c${prefix} ${message}`, LogColors[level]);
    
    if (context) {
      console.log(`%c–ö–æ–Ω—Ç–µ–∫—Å—Ç:`, 'color: #666;', context);
    }
    
    if (error) {
      console.log(`%c–û—à–∏–±–∫–∞:`, 'color: #ff4444;', error);
    }
  } else {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –ø—Ä–æ—Å—Ç–æ–π –≤—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—à–∏–±–æ–∫
    if (level === LogLevel.ERROR) {
      console.error(prefix, message);
      if (error) console.error('–î–µ—Ç–∞–ª–∏:', error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã
export const logger = {
  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è)
  error(message, context = null, error = null) {
    log(LogLevel.ERROR, message, context, error);
    
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if (!isDevelopment) {
      // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (Sentry, LogRocket)
    }
  },

  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
  warn(message, context = null) {
    log(LogLevel.WARN, message, context);
  },

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
  info(message, context = null) {
    log(LogLevel.INFO, message, context);
  },

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
  debug(message, context = null) {
    log(LogLevel.DEBUG, message, context);
  },

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤
  api: {
    request(method, url, data = null) {
      logger.debug(`API ${method} ${url}`, data);
    },
    
    success(method, url, data = null) {
      logger.info(`‚úÖ API ${method} ${url} - —É—Å–ø–µ—à–Ω–æ`, data);
    },
    
    error(method, url, error) {
      logger.error(`‚ùå API ${method} ${url} - –æ—à–∏–±–∫–∞`, { url, method }, error);
    }
  },

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
  user: {
    action(action, details = null) {
      logger.info(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${action}`, details);
    },
    
    error(action, error) {
      logger.error(`üë§ –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${action}`, null, error);
    }
  },

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  component: {
    mount(name) {
      logger.debug(`üé® –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω: ${name}`);
    },
    
    unmount(name) {
      logger.debug(`üé® –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω: ${name}`);
    },
    
    error(name, error) {
      logger.error(`üé® –û—à–∏–±–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${name}`, null, error);
    }
  }
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export const formatters = {
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  duration(ms) {
    if (ms < 1000) return `${ms}–º—Å`;
    if (ms < 60000) return `${(ms / 1000).toFixed(1)}—Å`;
    return `${(ms / 60000).toFixed(1)}–º–∏–Ω`;
  },

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
  bytes(bytes) {
    if (bytes < 1024) return `${bytes}B`;
    if (bytes < 1048576) return `${(bytes / 1024).toFixed(1)}KB`;
    return `${(bytes / 1048576).toFixed(1)}MB`;
  },

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
  object(obj, maxDepth = 2) {
    try {
      return JSON.stringify(obj, null, 2);
    } catch {
      return '[–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Å—Å—ã–ª–∫–∞]';
    }
  }
};

export default logger;