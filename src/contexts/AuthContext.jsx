import { createContext, useContext, useReducer, useEffect } from 'react'
import { AuthAPI, TokenService } from '../services/apiService'

// –°–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const AuthStates = {
  IDLE: 'idle',
  LOADING: 'loading',
  AUTHENTICATED: 'authenticated',
  UNAUTHENTICATED: 'unauthenticated',
  ERROR: 'error'
}

// –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è reducer
const AuthActions = {
  INIT_START: 'INIT_START',
  LOGIN_START: 'LOGIN_START',
  LOGIN_SUCCESS: 'LOGIN_SUCCESS',
  LOGIN_FAILED: 'LOGIN_FAILED',
  LOGOUT: 'LOGOUT',
  SET_ERROR: 'SET_ERROR',
  CLEAR_ERROR: 'CLEAR_ERROR'
}

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const initialState = {
  status: AuthStates.IDLE,
  user: null,
  isAuthenticated: false,
  isLoading: false,
  error: null
}

// Reducer –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function authReducer(state, action) {
  switch (action.type) {
    case AuthActions.INIT_START:
    case AuthActions.LOGIN_START:
      return {
        ...state,
        status: AuthStates.LOADING,
        isLoading: true,
        error: null
      }

    case AuthActions.LOGIN_SUCCESS:
      return {
        ...state,
        status: AuthStates.AUTHENTICATED,
        user: action.payload.user,
        isAuthenticated: true,
        isLoading: false,
        error: null
      }

    case AuthActions.LOGIN_FAILED:
      return {
        ...state,
        status: AuthStates.UNAUTHENTICATED,
        user: null,
        isAuthenticated: false,
        isLoading: false,
        error: action.payload.error
      }

    case AuthActions.LOGOUT:
      return {
        ...state,
        status: AuthStates.UNAUTHENTICATED,
        user: null,
        isAuthenticated: false,
        isLoading: false,
        error: null
      }

    case AuthActions.SET_ERROR:
      return {
        ...state,
        status: AuthStates.ERROR,
        isLoading: false,
        error: action.payload.error
      }

    case AuthActions.CLEAR_ERROR:
      return {
        ...state,
        error: null
      }

    default:
      return state
  }
}

// –°–æ–∑–¥–∞–µ–º Context
const AuthContext = createContext(null)

// Auth Provider –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
export function AuthProvider({ children }) {
  const [state, dispatch] = useReducer(authReducer, initialState)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const initAuth = async () => {
      dispatch({ type: AuthActions.INIT_START })
      
      const token = TokenService.getToken()
      
      if (!token || TokenService.isTokenExpired(token)) {
        dispatch({ type: AuthActions.LOGOUT })
        return
      }

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–∞—è –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = await AuthAPI.getProfile()
        
        dispatch({
          type: AuthActions.LOGIN_SUCCESS,
          payload: { user: userData.user }
        })
        
        console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', userData.user.name)
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message)
        TokenService.removeToken()
        dispatch({
          type: AuthActions.LOGIN_FAILED,
          payload: { error: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞' }
        })
      }
    }

    initAuth()
  }, [])

  // –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞
  const login = async (email, password) => {
    dispatch({ type: AuthActions.LOGIN_START })
    
    try {
      console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', email)
      const response = await AuthAPI.login(email, password)
      
      console.log('üì° –û—Ç–≤–µ—Ç API:', response)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
      const savedToken = TokenService.getToken()
      console.log('üîê –¢–æ–∫–µ–Ω –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞:', savedToken ? savedToken.substring(0, 50) + '...' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
      
      dispatch({
        type: AuthActions.LOGIN_SUCCESS,
        payload: { user: response.user }
      })
      
      console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω:', response.user.name)
      return { success: true, user: response.user }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error.message)
      
      dispatch({
        type: AuthActions.LOGIN_FAILED,
        payload: { error: error.message }
      })
      
      return { success: false, error: error.message }
    }
  }

  // –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const register = async (userData) => {
    dispatch({ type: AuthActions.LOGIN_START })
    
    try {
      console.log('üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', userData)
      const response = await AuthAPI.register(userData)
      
      dispatch({
        type: AuthActions.LOGIN_SUCCESS,
        payload: { user: response.user }
      })
      
      console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:', response.user.name)
      return { success: true, user: response.user }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      let errorMessage = error.message
      if (error.response && error.response.details) {
        const validationErrors = error.response.details.map(detail => 
          `${detail.field}: ${detail.message}`
        ).join(', ')
        errorMessage = `–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validationErrors}`
      }
      
      dispatch({
        type: AuthActions.LOGIN_FAILED,
        payload: { error: errorMessage }
      })
      
      return { success: false, error: errorMessage }
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
  const logout = () => {
    AuthAPI.logout() // –£–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ localStorage
    dispatch({ type: AuthActions.LOGOUT })
    console.log('üëã –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const updateUser = (updatedUser) => {
    dispatch({
      type: AuthActions.LOGIN_SUCCESS,
      payload: { user: { ...state.user, ...updatedUser } }
    })
  }

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫
  const clearError = () => {
    dispatch({ type: AuthActions.CLEAR_ERROR })
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const hasRole = (role) => {
    return state.user?.role === role
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  const isClient = () => hasRole('client')
  const isCoach = () => hasRole('coach')
  const isAdmin = () => hasRole('admin')

  const value = {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    ...state,
    
    // –ú–µ—Ç–æ–¥—ã
    login,
    register,
    logout,
    updateUser,
    clearError,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    hasRole,
    isClient,
    isCoach,
    isAdmin,
    
    // –°—Ç–∞—Ç—É—Å—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    isInitializing: state.status === AuthStates.LOADING && !state.isAuthenticated,
    hasError: state.status === AuthStates.ERROR,
  }

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}

// Hook –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Auth Context
export function useAuth() {
  const context = useContext(AuthContext)
  
  if (!context) {
    throw new Error('useAuth –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ AuthProvider')
  }
  
  return context
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export { AuthStates }

console.log('üîê Auth Context –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
