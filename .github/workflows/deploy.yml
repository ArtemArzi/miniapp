name: üöÄ Deploy to VPS

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: 'jaguar-fight-club'

jobs:
  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–±–æ—Ä–∫–∞
  test-and-build:
    name: üß™ Test & Build
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install frontend dependencies
        run: npm ci

      - name: üì¶ Install backend dependencies
        run: cd backend && npm ci

      - name: üîç Lint frontend
        run: npm run lint

      - name: üèóÔ∏è Build frontend
        run: npm run build
        env:
          VITE_API_URL: /api
          VITE_NODE_ENV: production

      - name: üß™ Test backend (placeholder)
        run: cd backend && npm test || echo "No tests configured yet"

      - name: üìä Build report
        run: |
          echo "‚úÖ Frontend build size:" 
          du -sh dist/
          echo "‚úÖ Backend dependencies:"
          cd backend && npm ls --depth=0 --prod

  # Deployment –Ω–∞ VPS (—Ç–æ–ª—å–∫–æ –¥–ª—è main/master)
  deploy:
    name: üöÄ Deploy to VPS
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîë Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: üñ•Ô∏è Deploy to VPS
        run: |
          # –î–æ–±–∞–≤–ª—è–µ–º VPS –≤ known_hosts
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          
          # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –Ω–∞ VPS
          rsync -avz --delete \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude '*.log' \
            --exclude '.env*' \
            ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/opt/jaguar-app/
          
          # –í—ã–ø–æ–ª–Ω—è–µ–º deployment –Ω–∞ VPS
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /opt/jaguar-app
            
            # –ö–æ–ø–∏—Ä—É–µ–º production environment —Ñ–∞–π–ª—ã
            cp .env.production .env
            cp backend/.env.production backend/.env
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å —É—á–µ—Ç–æ–º –¥–æ–º–µ–Ω–∞ VPS
            sed -i "s/YOUR_DOMAIN.COM/${{ secrets.VPS_DOMAIN }}/g" backend/.env
            
            # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            docker-compose down
            docker-compose build --no-cache
            docker-compose up -d
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            sleep 30
            curl -f http://localhost:3001/api/test || exit 1
            
            echo "‚úÖ Deployment completed successfully!"
          EOF

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
  notify:
    name: üì¢ Notify
    runs-on: ubuntu-latest
    needs: [test-and-build, deploy]
    if: always()
    
    steps:
      - name: üì¢ Success notification
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ Deployment to VPS completed successfully!"
          echo "üåê Application available at: https://${{ secrets.VPS_DOMAIN }}"
      
      - name: ‚ùå Failure notification  
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs above for details."